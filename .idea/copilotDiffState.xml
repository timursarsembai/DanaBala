<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/AchievementManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/AchievementManager.kt" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.content.Context&#10;&#10;class AchievementManager(context: Context) {&#10;    private val progressManager = ProgressManager(context)&#10;    &#10;    data class Achievement(&#10;        val id: String,&#10;        val title: String,&#10;        val description: String,&#10;        val emoji: String,&#10;        val isUnlocked: Boolean = false&#10;    )&#10;&#10;    fun checkAchievements(trainingType: String): List&lt;Achievement&gt; {&#10;        val newAchievements = mutableListOf&lt;Achievement&gt;()&#10;        val completed = progressManager.getCompletedTrainings(trainingType)&#10;        val successRate = progressManager.getSuccessRate(trainingType)&#10;        val bestScore = progressManager.getBestScore(trainingType)&#10;&#10;        // Достижения за количество тренировок&#10;        when (completed) {&#10;            1 -&gt; newAchievements.add(Achievement(&#10;                &quot;${trainingType}_first&quot;, &quot;Первые шаги&quot;, &#10;                &quot;Прошел первую тренировку!&quot;, &quot;&quot;&#10;            ))&#10;            5 -&gt; newAchievements.add(Achievement(&#10;                &quot;${trainingType}_5th&quot;, &quot;Упорный ученик&quot;, &#10;                &quot;Прошел 5 тренировок!&quot;, &quot;&quot;&#10;            ))&#10;            10 -&gt; newAchievements.add(Achievement(&#10;                &quot;${trainingType}_10th&quot;, &quot;Знаток&quot;, &#10;                &quot;Прошел 10 тренировок!&quot;, &quot;&quot;&#10;            ))&#10;        }&#10;&#10;        // Достижения за качество&#10;        if (successRate &gt;= 90 &amp;&amp; completed &gt;= 3) {&#10;            newAchievements.add(Achievement(&#10;                &quot;${trainingType}_perfectionist&quot;, &quot;Перфекционист&quot;, &#10;                &quot;Успешность 90%+!&quot;, &quot;⭐&quot;&#10;            ))&#10;        }&#10;&#10;        // Достижения за безошибочное прохождение&#10;        if (trainingType == &quot;numbers&quot; &amp;&amp; bestScore &gt;= 18) {&#10;            newAchievements.add(Achievement(&#10;                &quot;${trainingType}_master&quot;, &quot;Мастер цифр&quot;, &#10;                &quot;Почти идеальный результат!&quot;, &quot;&quot;&#10;            ))&#10;        } else if (trainingType == &quot;letters&quot; &amp;&amp; bestScore &gt;= 30) {&#10;            newAchievements.add(Achievement(&#10;                &quot;${trainingType}_master&quot;, &quot;Мастер букв&quot;, &#10;                &quot;Почти идеальный результат!&quot;, &quot;&quot;&#10;            ))&#10;        }&#10;&#10;        return newAchievements&#10;    }&#10;&#10;    fun getAllAchievements(): List&lt;Achievement&gt; {&#10;        return listOf(&#10;            // Математика&#10;            Achievement(&quot;numbers_first&quot;, &quot;Первые шаги&quot;, &quot;Прошел первую тренировку по математике!&quot;, &quot;&quot;),&#10;            Achievement(&quot;numbers_5th&quot;, &quot;Упорный ученик&quot;, &quot;Прошел 5 тренировок по математике!&quot;, &quot;&quot;),&#10;            Achievement(&quot;numbers_10th&quot;, &quot;Знаток математики&quot;, &quot;Прошел 10 тренировок по математике!&quot;, &quot;&quot;),&#10;            Achievement(&quot;numbers_perfectionist&quot;, &quot;Перфекционист&quot;, &quot;Успешность 90%+ в математике!&quot;, &quot;⭐&quot;),&#10;            Achievement(&quot;numbers_master&quot;, &quot;Мастер цифр&quot;, &quot;Почти идеальный результат!&quot;, &quot;&quot;),&#10;            &#10;            // Чтение&#10;            Achievement(&quot;letters_first&quot;, &quot;Первые шаги&quot;, &quot;Прошел первую тренировку по чтению!&quot;, &quot;&quot;),&#10;            Achievement(&quot;letters_5th&quot;, &quot;Упорный ученик&quot;, &quot;Прошел 5 тренировок по чтению!&quot;, &quot;&quot;),&#10;            Achievement(&quot;letters_10th&quot;, &quot;Знаток чтения&quot;, &quot;Прошел 10 тренировок по чтению!&quot;, &quot;&quot;),&#10;            Achievement(&quot;letters_perfectionist&quot;, &quot;Перфекционист&quot;, &quot;Успешность 90%+ в чтении!&quot;, &quot;⭐&quot;),&#10;            Achievement(&quot;letters_master&quot;, &quot;Мастер букв&quot;, &quot;Почти идеальный результат!&quot;, &quot;&quot;)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/LetterRecognitionActivityFixed.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/LetterRecognitionActivityFixed.kt" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.os.VibrationEffect&#10;import android.os.Vibrator&#10;import android.os.VibratorManager&#10;import android.speech.tts.TextToSpeech&#10;import android.util.Log&#10;import android.view.View&#10;import android.view.animation.BounceInterpolator&#10;import android.widget.ImageView&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class LetterRecognitionActivityFixed : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var targetLetter = &quot;А&quot;&#10;    private var currentQuestion = 0&#10;    private val totalQuestions = 33 // 33 буквы в русском алфавите&#10;    private var tts: TextToSpeech? = null&#10;    private var isTtsReady = false&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private var currentQuestionText = &quot;&quot;&#10;&#10;    // Переменные для отслеживания ошибок&#10;    private var correctAnswersCount = 0&#10;    private var answersWithErrors = 0&#10;    private var currentQuestionHasError = false&#10;&#10;    // Список доступных букв для избежания повторов&#10;    private val availableLetters = mutableListOf&lt;String&gt;()&#10;&#10;    // Русский алфавит&#10;    private val russianAlphabet = arrayOf(&#10;        &quot;А&quot;, &quot;Б&quot;, &quot;В&quot;, &quot;Г&quot;, &quot;Д&quot;, &quot;Е&quot;, &quot;Ё&quot;, &quot;Ж&quot;, &quot;З&quot;, &quot;И&quot;, &quot;Й&quot;, &quot;К&quot;, &quot;Л&quot;, &quot;М&quot;, &quot;Н&quot;, &quot;О&quot;, &quot;П&quot;,&#10;        &quot;Р&quot;, &quot;С&quot;, &quot;Т&quot;, &quot;У&quot;, &quot;Ф&quot;, &quot;Х&quot;, &quot;Ц&quot;, &quot;Ч&quot;, &quot;Ш&quot;, &quot;Щ&quot;, &quot;Ъ&quot;, &quot;Ы&quot;, &quot;Ь&quot;, &quot;Э&quot;, &quot;Ю&quot;, &quot;Я&quot;&#10;    )&#10;&#10;    // Правильное произношение букв для TTS&#10;    private val letterPronunciation = mapOf(&#10;        &quot;А&quot; to &quot;А&quot;,&#10;        &quot;Б&quot; to &quot;БЭ&quot;,&#10;        &quot;В&quot; to &quot;ВЭ&quot;,&#10;        &quot;Г&quot; to &quot;ГЭ&quot;,&#10;        &quot;Д&quot; to &quot;ДЭ&quot;,&#10;        &quot;Е&quot; to &quot;Е&quot;,&#10;        &quot;Ё&quot; to &quot;Ё&quot;,&#10;        &quot;Ж&quot; to &quot;ЖЭ&quot;,&#10;        &quot;З&quot; to &quot;ЗЭ&quot;,&#10;        &quot;И&quot; to &quot;И&quot;,&#10;        &quot;Й&quot; to &quot;И КРАТКОЕ&quot;,&#10;        &quot;К&quot; to &quot;КА&quot;,&#10;        &quot;Л&quot; to &quot;ЭЛЬ&quot;,&#10;        &quot;М&quot; to &quot;ЭМ&quot;,&#10;        &quot;Н&quot; to &quot;ЭН&quot;,&#10;        &quot;О&quot; to &quot;ОООО&quot;,&#10;        &quot;П&quot; to &quot;ПЭ&quot;,&#10;        &quot;Р&quot; to &quot;ЭР&quot;,&#10;        &quot;С&quot; to &quot;ЭС&quot;,&#10;        &quot;Т&quot; to &quot;ТЭ&quot;,&#10;        &quot;У&quot; to &quot;У&quot;,&#10;        &quot;Ф&quot; to &quot;ЭФ&quot;,&#10;        &quot;Х&quot; to &quot;ХА&quot;,&#10;        &quot;Ц&quot; to &quot;ЦЭ&quot;,&#10;        &quot;Ч&quot; to &quot;ЧЭ&quot;,&#10;        &quot;Ш&quot; to &quot;ША&quot;,&#10;        &quot;Щ&quot; to &quot;ЩА&quot;,&#10;        &quot;Ъ&quot; to &quot;ТВЁРДЫЙ ЗНАК&quot;,&#10;        &quot;Ы&quot; to &quot;Ы&quot;,&#10;        &quot;Ь&quot; to &quot;МЯГКИЙ ЗНАК&quot;,&#10;        &quot;Э&quot; to &quot;Э&quot;,&#10;        &quot;Ю&quot; to &quot;Ю&quot;,&#10;        &quot;Я&quot; to &quot;Я&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_letter_recognition)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация списка доступных букв&#10;        initializeAvailableLetters()&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        setupBackButton()&#10;        setupSpeakerButton()&#10;        &#10;        // Убираем текст вопроса - делаем его невидимым&#10;        findViewById&lt;TextView&gt;(R.id.questionText).visibility = View.GONE&#10;        &#10;        startNewQuestion()&#10;    }&#10;&#10;    private fun initializeAvailableLetters() {&#10;        availableLetters.clear()&#10;        availableLetters.addAll(russianAlphabet)&#10;        availableLetters.shuffle()&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts?.setLanguage(Locale(&quot;ru&quot;))&#10;            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {&#10;                Log.e(&quot;TTS&quot;, &quot;Русский язык не поддерживается, используем английский&quot;)&#10;                tts?.language = Locale.getDefault()&#10;            }&#10;            isTtsReady = true&#10;&#10;            // Озвучиваем вопрос сразу, если он уже готов&#10;            if (currentQuestionText.isNotEmpty()) {&#10;                // Небольшая задержка для первого вопроса&#10;                handler.postDelayed({&#10;                    speakQuestion()&#10;                }, 500)&#10;            }&#10;        } else {&#10;            Log.e(&quot;TTS&quot;, &quot;Инициализация TTS не удалась&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupBackButton() {&#10;        findViewById&lt;View&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun setupSpeakerButton() {&#10;        findViewById&lt;ImageView&gt;(R.id.speakerButton).setOnClickListener {&#10;            speakQuestion()&#10;        }&#10;    }&#10;&#10;    private fun speakQuestion() {&#10;        if (isTtsReady &amp;&amp; currentQuestionText.isNotEmpty()) {&#10;            tts?.speak(currentQuestionText, TextToSpeech.QUEUE_FLUSH, null, &quot;question&quot;)&#10;        }&#10;    }&#10;&#10;    private fun vibrateOnError() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            val vibratorManager = getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager&#10;            val vibrator = vibratorManager.defaultVibrator&#10;            vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;        } else {&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            val vibrator = getSystemService(Context.VIBRATOR_SERVICE) as Vibrator&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;            } else {&#10;                @Suppress(&quot;DEPRECATION&quot;)&#10;                vibrator.vibrate(200)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startNewQuestion() {&#10;        if (currentQuestion &gt;= totalQuestions) {&#10;            showResultsScreen()&#10;            return&#10;        }&#10;&#10;        currentQuestion++&#10;        currentQuestionHasError = false&#10;&#10;        // Получаем следующую букву из списка доступных&#10;        if (availableLetters.isEmpty()) {&#10;            initializeAvailableLetters()&#10;        }&#10;        targetLetter = availableLetters.removeAt(0)&#10;&#10;        // Обновляем вопрос с правильным произношением&#10;        val letterName = letterPronunciation[targetLetter] ?: targetLetter&#10;        val questionText = &quot;Найди букву $letterName&quot;&#10;        currentQuestionText = questionText&#10;&#10;        // Озвучиваем вопрос (если TTS готов)&#10;        if (isTtsReady) {&#10;            speakQuestion()&#10;        }&#10;&#10;        // Обновляем прогресс-бар&#10;        val progressBar = findViewById&lt;ProgressBar&gt;(R.id.progressBar)&#10;        progressBar.progress = (currentQuestion * 100) / totalQuestions&#10;&#10;        // Генерируем 4 случайные буквы, одна из которых правильная&#10;        val letters = generateLetterOptions(targetLetter)&#10;&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        val letterTexts = listOf(&#10;            findViewById&lt;TextView&gt;(R.id.letter1),&#10;            findViewById&lt;TextView&gt;(R.id.letter2),&#10;            findViewById&lt;TextView&gt;(R.id.letter3),&#10;            findViewById&lt;TextView&gt;(R.id.letter4)&#10;        )&#10;&#10;        // Заполняем карточки&#10;        for (i in 0..3) {&#10;            letterTexts[i].text = letters[i]&#10;            cards[i].setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))&#10;            cards[i].isClickable = true&#10;            animateCardEntrance(cards[i], i * 100L)&#10;&#10;            cards[i].setOnClickListener {&#10;                checkAnswer(letters[i], cards[i])&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun animateCardEntrance(card: CardView, delay: Long) {&#10;        card.alpha = 0f&#10;        card.scaleX = 0.5f&#10;        card.scaleY = 0.5f&#10;&#10;        card.animate()&#10;            .alpha(1f)&#10;            .scaleX(1f)&#10;            .scaleY(1f)&#10;            .setDuration(300)&#10;            .setStartDelay(delay)&#10;            .setInterpolator(BounceInterpolator())&#10;            .start()&#10;    }&#10;&#10;    private fun generateLetterOptions(correct: String): List&lt;String&gt; {&#10;        val options = mutableSetOf&lt;String&gt;()&#10;        options.add(correct)&#10;&#10;        while (options.size &lt; 4) {&#10;            val randomLetter = russianAlphabet[Random.nextInt(russianAlphabet.size)]&#10;            options.add(randomLetter)&#10;        }&#10;&#10;        return options.shuffled()&#10;    }&#10;&#10;    private fun checkAnswer(selectedLetter: String, selectedCard: CardView) {&#10;        if (selectedLetter == targetLetter) {&#10;            // Правильный ответ&#10;            if (currentQuestionHasError) {&#10;                answersWithErrors++&#10;            } else {&#10;                correctAnswersCount++&#10;            }&#10;&#10;            animateCorrectAnswer(selectedCard)&#10;            tts?.speak(&quot;Молодец!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;correct&quot;)&#10;            disableAllCards()&#10;&#10;            handler.postDelayed({&#10;                startNewQuestion()&#10;            }, 2000)&#10;        } else {&#10;            // Неправильный ответ&#10;            currentQuestionHasError = true&#10;            animateWrongAnswer(selectedCard)&#10;            vibrateOnError()&#10;            tts?.speak(&quot;Попробуй ещё раз, у тебя получится!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;wrong&quot;)&#10;            selectedCard.isClickable = false&#10;        }&#10;    }&#10;&#10;    private fun disableAllCards() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;        cards.forEach { it.isClickable = false }&#10;    }&#10;&#10;    private fun animateCorrectAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;&#10;        val scaleUpX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1f, 1.3f)&#10;        val scaleUpY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1f, 1.3f)&#10;        val scaleDownX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1.3f, 1f)&#10;        val scaleDownY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1.3f, 1f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.play(scaleUpX).with(scaleUpY)&#10;        animatorSet.play(scaleDownX).with(scaleDownY).after(scaleUpX)&#10;        animatorSet.duration = 200&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun animateWrongAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_red_light))&#10;&#10;        val shake = ObjectAnimator.ofFloat(card, &quot;translationX&quot;, 0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 500&#10;        shake.start()&#10;    }&#10;&#10;    private fun showResultsScreen() {&#10;        val intent = Intent(this, ResultsActivity::class.java)&#10;        intent.putExtra(&quot;score&quot;, correctAnswersCount)&#10;        intent.putExtra(&quot;total&quot;, totalQuestions)&#10;        intent.putExtra(&quot;correctAnswersCount&quot;, correctAnswersCount)&#10;        intent.putExtra(&quot;answersWithErrors&quot;, answersWithErrors)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/LetterRecognitionActivity_fixed.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/LetterRecognitionActivity_fixed.kt" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.os.VibrationEffect&#10;import android.os.Vibrator&#10;import android.os.VibratorManager&#10;import android.speech.tts.TextToSpeech&#10;import android.util.Log&#10;import android.view.View&#10;import android.view.animation.BounceInterpolator&#10;import android.widget.ImageView&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class LetterRecognitionActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var targetLetter = &quot;А&quot;&#10;    private var currentQuestion = 0&#10;    private val totalQuestions = 33 // 33 буквы в русском алфавите&#10;    private var tts: TextToSpeech? = null&#10;    private var isTtsReady = false&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private var currentQuestionText = &quot;&quot;&#10;&#10;    // Переменные для отслеживания ошибок&#10;    private var correctAnswersCount = 0&#10;    private var answersWithErrors = 0&#10;    private var currentQuestionHasError = false&#10;&#10;    // Список доступных букв для избежания повторов&#10;    private val availableLetters = mutableListOf&lt;String&gt;()&#10;&#10;    // Русский алфавит&#10;    private val russianAlphabet = arrayOf(&#10;        &quot;А&quot;, &quot;Б&quot;, &quot;В&quot;, &quot;Г&quot;, &quot;Д&quot;, &quot;Е&quot;, &quot;Ё&quot;, &quot;Ж&quot;, &quot;З&quot;, &quot;И&quot;, &quot;Й&quot;, &quot;К&quot;, &quot;Л&quot;, &quot;М&quot;, &quot;Н&quot;, &quot;О&quot;, &quot;П&quot;,&#10;        &quot;Р&quot;, &quot;С&quot;, &quot;Т&quot;, &quot;У&quot;, &quot;Ф&quot;, &quot;Х&quot;, &quot;Ц&quot;, &quot;Ч&quot;, &quot;Ш&quot;, &quot;Щ&quot;, &quot;Ъ&quot;, &quot;Ы&quot;, &quot;Ь&quot;, &quot;Э&quot;, &quot;Ю&quot;, &quot;Я&quot;&#10;    )&#10;&#10;    // Правильное произношение букв для TTS&#10;    private val letterPronunciation = mapOf(&#10;        &quot;А&quot; to &quot;А&quot;,&#10;        &quot;Б&quot; to &quot;БЭ&quot;, &#10;        &quot;В&quot; to &quot;ВЭ&quot;,&#10;        &quot;Г&quot; to &quot;ГЭ&quot;,&#10;        &quot;Д&quot; to &quot;ДЭ&quot;,&#10;        &quot;Е&quot; to &quot;Е&quot;,&#10;        &quot;Ё&quot; to &quot;Ё&quot;,&#10;        &quot;Ж&quot; to &quot;ЖЭ&quot;,&#10;        &quot;З&quot; to &quot;ЗЭ&quot;,&#10;        &quot;И&quot; to &quot;И&quot;,&#10;        &quot;Й&quot; to &quot;И КРАТКОЕ&quot;,&#10;        &quot;К&quot; to &quot;КА&quot;,&#10;        &quot;Л&quot; to &quot;ЭЛЬ&quot;,&#10;        &quot;М&quot; to &quot;ЭМ&quot;,&#10;        &quot;Н&quot; to &quot;ЭН&quot;,&#10;        &quot;О&quot; to &quot;О-О&quot;,&#10;        &quot;П&quot; to &quot;ПЭ&quot;,&#10;        &quot;Р&quot; to &quot;ЭР&quot;,&#10;        &quot;С&quot; to &quot;ЭС&quot;,&#10;        &quot;Т&quot; to &quot;ТЭ&quot;,&#10;        &quot;У&quot; to &quot;У&quot;,&#10;        &quot;Ф&quot; to &quot;ЭФ&quot;,&#10;        &quot;Х&quot; to &quot;ХА&quot;,&#10;        &quot;Ц&quot; to &quot;ЦЭ&quot;,&#10;        &quot;Ч&quot; to &quot;ЧЭ&quot;,&#10;        &quot;Ш&quot; to &quot;ША&quot;,&#10;        &quot;Щ&quot; to &quot;ЩА&quot;,&#10;        &quot;Ъ&quot; to &quot;ТВЁРДЫЙ ЗНАК&quot;,&#10;        &quot;Ы&quot; to &quot;Ы&quot;,&#10;        &quot;Ь&quot; to &quot;МЯГКИЙ ЗНАК&quot;,&#10;        &quot;Э&quot; to &quot;Э&quot;,&#10;        &quot;Ю&quot; to &quot;Ю&quot;,&#10;        &quot;Я&quot; to &quot;Я&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_letter_recognition)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация списка доступных букв&#10;        initializeAvailableLetters()&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        setupBackButton()&#10;        setupSpeakerButton()&#10;        startNewQuestion()&#10;    }&#10;&#10;    private fun initializeAvailableLetters() {&#10;        availableLetters.clear()&#10;        availableLetters.addAll(russianAlphabet)&#10;        availableLetters.shuffle()&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts?.setLanguage(Locale(&quot;ru&quot;))&#10;            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {&#10;                Log.e(&quot;TTS&quot;, &quot;Русский язык не поддерживается, используем английский&quot;)&#10;                tts?.language = Locale.getDefault()&#10;            }&#10;            isTtsReady = true&#10;&#10;            // Озвучиваем вопрос сразу, если он уже готов&#10;            if (currentQuestionText.isNotEmpty()) {&#10;                speakQuestion()&#10;            }&#10;        } else {&#10;            Log.e(&quot;TTS&quot;, &quot;Инициализация TTS не удалась&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupBackButton() {&#10;        findViewById&lt;View&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun setupSpeakerButton() {&#10;        findViewById&lt;ImageView&gt;(R.id.speakerButton).setOnClickListener {&#10;            speakQuestion()&#10;        }&#10;    }&#10;&#10;    private fun speakQuestion() {&#10;        if (isTtsReady &amp;&amp; currentQuestionText.isNotEmpty()) {&#10;            tts?.speak(currentQuestionText, TextToSpeech.QUEUE_FLUSH, null, &quot;question&quot;)&#10;        }&#10;    }&#10;&#10;    private fun vibrateOnError() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            val vibratorManager = getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager&#10;            val vibrator = vibratorManager.defaultVibrator&#10;            vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;        } else {&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            val vibrator = getSystemService(Context.VIBRATOR_SERVICE) as Vibrator&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;            } else {&#10;                @Suppress(&quot;DEPRECATION&quot;)&#10;                vibrator.vibrate(200)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startNewQuestion() {&#10;        if (currentQuestion &gt;= totalQuestions) {&#10;            showResultsScreen()&#10;            return&#10;        }&#10;&#10;        currentQuestion++&#10;        currentQuestionHasError = false&#10;&#10;        // Получаем следующую букву из списка доступных&#10;        if (availableLetters.isEmpty()) {&#10;            initializeAvailableLetters()&#10;        }&#10;        targetLetter = availableLetters.removeAt(0)&#10;&#10;        // Формируем текст вопроса с правильным произношением для TTS&#10;        val letterName = letterPronunciation[targetLetter] ?: targetLetter&#10;        currentQuestionText = &quot;Найди букву $letterName&quot;&#10;&#10;        // Озвучиваем вопрос сразу (если TTS готов)&#10;        if (isTtsReady) {&#10;            speakQuestion()&#10;        }&#10;&#10;        // Обновляем прогресс-бар&#10;        val progressBar = findViewById&lt;ProgressBar&gt;(R.id.progressBar)&#10;        progressBar.progress = (currentQuestion * 100) / totalQuestions&#10;&#10;        // Генерируем 4 случайные буквы, одна из которых правильная&#10;        val letters = generateLetterOptions(targetLetter)&#10;&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        val letterTexts = listOf(&#10;            findViewById&lt;TextView&gt;(R.id.letter1),&#10;            findViewById&lt;TextView&gt;(R.id.letter2),&#10;            findViewById&lt;TextView&gt;(R.id.letter3),&#10;            findViewById&lt;TextView&gt;(R.id.letter4)&#10;        )&#10;&#10;        // Заполняем карточки&#10;        for (i in 0..3) {&#10;            letterTexts[i].text = letters[i]&#10;            cards[i].setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))&#10;            cards[i].isClickable = true&#10;            animateCardEntrance(cards[i], i * 100L)&#10;&#10;            cards[i].setOnClickListener {&#10;                checkAnswer(letters[i], cards[i])&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun animateCardEntrance(card: CardView, delay: Long) {&#10;        card.alpha = 0f&#10;        card.scaleX = 0.5f&#10;        card.scaleY = 0.5f&#10;&#10;        card.animate()&#10;            .alpha(1f)&#10;            .scaleX(1f)&#10;            .scaleY(1f)&#10;            .setDuration(300)&#10;            .setStartDelay(delay)&#10;            .setInterpolator(BounceInterpolator())&#10;            .start()&#10;    }&#10;&#10;    private fun generateLetterOptions(correct: String): List&lt;String&gt; {&#10;        val options = mutableSetOf&lt;String&gt;()&#10;        options.add(correct)&#10;&#10;        while (options.size &lt; 4) {&#10;            val randomLetter = russianAlphabet[Random.nextInt(russianAlphabet.size)]&#10;            options.add(randomLetter)&#10;        }&#10;&#10;        return options.shuffled()&#10;    }&#10;&#10;    private fun checkAnswer(selectedLetter: String, selectedCard: CardView) {&#10;        if (selectedLetter == targetLetter) {&#10;            // Правильный ответ&#10;            if (currentQuestionHasError) {&#10;                answersWithErrors++&#10;            } else {&#10;                correctAnswersCount++&#10;            }&#10;&#10;            animateCorrectAnswer(selectedCard)&#10;            tts?.speak(&quot;Молодец!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;correct&quot;)&#10;            disableAllCards()&#10;&#10;            handler.postDelayed({&#10;                startNewQuestion()&#10;            }, 2000)&#10;        } else {&#10;            // Неправильный ответ&#10;            currentQuestionHasError = true&#10;            animateWrongAnswer(selectedCard)&#10;            vibrateOnError()&#10;            tts?.speak(&quot;Попробуй ещё раз, у тебя получится!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;wrong&quot;)&#10;            selectedCard.isClickable = false&#10;        }&#10;    }&#10;&#10;    private fun disableAllCards() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;        cards.forEach { it.isClickable = false }&#10;    }&#10;&#10;    private fun animateCorrectAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;&#10;        val scaleUpX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1f, 1.3f)&#10;        val scaleUpY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1f, 1.3f)&#10;        val scaleDownX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1.3f, 1f)&#10;        val scaleDownY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1.3f, 1f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.play(scaleUpX).with(scaleUpY)&#10;        animatorSet.play(scaleDownX).with(scaleDownY).after(scaleUpX)&#10;        animatorSet.duration = 200&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun animateWrongAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_red_light))&#10;&#10;        val shake = ObjectAnimator.ofFloat(card, &quot;translationX&quot;, 0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 500&#10;        shake.start()&#10;    }&#10;&#10;    private fun showResultsScreen() {&#10;        val intent = Intent(this, ResultsActivity::class.java)&#10;        intent.putExtra(&quot;score&quot;, correctAnswersCount)&#10;        intent.putExtra(&quot;total&quot;, totalQuestions)&#10;        intent.putExtra(&quot;correctAnswersCount&quot;, correctAnswersCount)&#10;        intent.putExtra(&quot;answersWithErrors&quot;, answersWithErrors)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/NumberRecognitionActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/NumberRecognitionActivity.kt" />
              <option name="originalContent" value="package com.example.danabala&#10;&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.view.View&#10;import android.view.animation.BounceInterpolator&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class NumberRecognitionActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var targetNumber = 1&#10;    private var score = 0 // Правильные ответы с первого раза&#10;    private var totalCorrectAnswers = 0 // Все правильные ответы (вкл��чая с повторными попытками)&#10;    private var currentQuestion = 0&#10;    private val totalQuestions = 20&#10;    private var tts: TextToSpeech? = null&#10;    private var isFirstInit = true // Флаг для первой инициализации&#10;    private var hasTriedCurrentQuestion = false // Фла�� для отслеживания попыток на те��ущем вопросе&#10;&#10;    // Список всех вопросов (каждая цифра от 0 до 9 по 2 раза)&#10;    private val questionNumbers = mutableListOf&lt;Int&gt;()&#10;    private var currentQuestionIndex = 0&#10;&#10;    // Массив прописных чисел&#10;    private val numberWords = arrayOf(&#10;        &quot;ноль&quot;, &quot;один&quot;, &quot;два&quot;, &quot;три&quot;, &quot;четыре&quot;, &quot;пять&quot;,&#10;        &quot;шесть&quot;, &quot;семь&quot;, &quot;восемь&quot;, &quot;девять&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_number_recognition)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        setupBackButton()&#10;        // Убираем startNewQuestion() отсюда - перенесено в onInit()&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            tts?.language = Locale(&quot;ru&quot;, &quot;RU&quot;)&#10;            // Запускаем первый вопрос только при первой инициализации TTS&#10;            if (isFirstInit) {&#10;                generateQuestionSequence()&#10;                startNewQuestion()&#10;                isFirstInit = false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupBackButton() {&#10;        findViewById&lt;View&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun startNewQuestion() {&#10;        if (currentQuestion &gt;= totalQuestions) {&#10;            showResultsScreen()&#10;            return&#10;        }&#10;&#10;        currentQuestion++&#10;        hasTriedCurrentQuestion = false // Сбрасываем флаг для нового вопроса&#10;&#10;        // Скрываем loading и показываем игровой контент при первом вопросе&#10;        if (currentQuestion == 1) {&#10;            findViewById&lt;View&gt;(R.id.loadingContainer).visibility = View.GONE&#10;            findViewById&lt;View&gt;(R.id.gameContainer).visibility = View.VISIBLE&#10;        }&#10;&#10;        // Берем цифру из заранее сгенерированной последовательности&#10;        targetNumber = questionNumbers[currentQuestionIndex]&#10;        currentQuestionIndex++&#10;&#10;        // Обновляем вопрос с прописным числом&#10;        val questionText = &quot;Найди цифру ${numberWords[targetNumber]}&quot;&#10;        findViewById&lt;TextView&gt;(R.id.questionText).text = questionText&#10;&#10;        // Озвучиваем вопрос&#10;        tts?.speak(questionText, TextToSpeech.QUEUE_FLUSH, null, &quot;question&quot;)&#10;&#10;        // Настраиваем кнопку динамика для повторного озвучивания&#10;        findViewById&lt;View&gt;(R.id.speakerButton).setOnClickListener {&#10;            tts?.speak(questionText, TextToSpeech.QUEUE_FLUSH, null, &quot;repeat_question&quot;)&#10;        }&#10;&#10;        // Обновляем прогресс-бар&#10;        val progressBar = findViewById&lt;ProgressBar&gt;(R.id.progressBar)&#10;        progressBar.progress = (currentQuestion * 100) / totalQuestions&#10;&#10;        // Генерируем 4 случайные цифры, одна из которых правильная&#10;        val numbers = generateNumberOptions(targetNumber)&#10;&#10;        // Находим карточки&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        val numberTexts = listOf(&#10;            findViewById&lt;TextView&gt;(R.id.number1),&#10;            findViewById&lt;TextView&gt;(R.id.number2),&#10;            findViewById&lt;TextView&gt;(R.id.number3),&#10;            findViewById&lt;TextView&gt;(R.id.number4)&#10;        )&#10;&#10;        // Заполняем карточки&#10;        for (i in 0..3) {&#10;            numberTexts[i].text = numbers[i].toString()&#10;&#10;            // Сбрасываем цвет карточки&#10;            cards[i].setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))&#10;&#10;            // Добавляем анимацию появления&#10;            animateCardEntrance(cards[i], i * 100L)&#10;&#10;            cards[i].setOnClickListener {&#10;                checkAnswer(numbers[i], cards[i])&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun animateCardEntrance(card: CardView, delay: Long) {&#10;        card.alpha = 0f&#10;        card.scaleX = 0.5f&#10;        card.scaleY = 0.5f&#10;&#10;        card.animate()&#10;            .alpha(1f)&#10;            .scaleX(1f)&#10;            .scaleY(1f)&#10;            .setDuration(300)&#10;            .setStartDelay(delay)&#10;            .setInterpolator(BounceInterpolator())&#10;            .start()&#10;    }&#10;&#10;    private fun generateNumberOptions(correct: Int): List&lt;Int&gt; {&#10;        val options = mutableSetOf&lt;Int&gt;()&#10;        options.add(correct)&#10;&#10;        // Добавляем 3 неправильных варианта из диапазона 0-9&#10;        while (options.size &lt; 4) {&#10;            val randomNum = Random.nextInt(0, 10)&#10;            options.add(randomNum)&#10;        }&#10;&#10;        return options.shuffled()&#10;    }&#10;&#10;    private fun checkAnswer(selectedNumber: Int, selectedCard: CardView) {&#10;        // Отключаем все карточки от наж��тий&#10;        disableAllCards()&#10;&#10;        if (selectedNumber == targetNumber) {&#10;            // Правильный ответ&#10;            totalCorrectAnswers++&#10;&#10;            // Засчитываем правильный ответ с первого раза только если не было попыток&#10;            if (!hasTriedCurrentQuestion) {&#10;                score++&#10;            }&#10;&#10;            animateCorrectAnswer(selectedCard)&#10;            tts?.speak(&quot;Молодец!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;correct&quot;)&#10;&#10;            // Переходим к следующему вопросу через 2 секунды&#10;            findViewById&lt;View&gt;(R.id.card1).postDelayed({&#10;                startNewQuestion()&#10;            }, 2000)&#10;        } else {&#10;            // Неправильный ответ - отмечаем что была попытка&#10;            hasTriedCurrentQuestion = true&#10;&#10;            animateWrongAnswer(selectedCard)&#10;            tts?.speak(&quot;Попробуй ещё раз!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;wrong&quot;)&#10;&#10;            // Через 2 секунды включаем карточки обратно&#10;            findViewById&lt;View&gt;(R.id.card1).postDelayed({&#10;                enableAllCards()&#10;                resetCardColors()&#10;            }, 2000)&#10;        }&#10;    }&#10;&#10;    private fun enableAllCards() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        cards.forEach { it.isClickable = true }&#10;    }&#10;&#10;    private fun resetCardColors() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        cards.forEach {&#10;            it.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))&#10;        }&#10;    }&#10;&#10;    private fun disableAllCards() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        cards.forEach { it.isClickable = false }&#10;    }&#10;&#10;    private fun animateCorrectAnswer(card: CardView) {&#10;        // Зеленый цвет для правильного ответа&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;&#10;        // Анимация увеличения и уменьшения&#10;        val scaleUpX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1f, 1.3f)&#10;        val scaleUpY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1f, 1.3f)&#10;        val scaleDownX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1.3f, 1f)&#10;        val scaleDownY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1.3f, 1f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.play(scaleUpX).with(scaleUpY)&#10;        animatorSet.play(scaleDownX).with(scaleDownY).after(scaleUpX)&#10;        animatorSet.duration = 200&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun animateWrongAnswer(card: CardView) {&#10;        // Красный цвет для неправильного ответа&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_red_light))&#10;&#10;        // Анимация тряски&#10;        val shake = ObjectAnimator.ofFloat(card, &quot;translationX&quot;, 0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 500&#10;        shake.start()&#10;    }&#10;&#10;    private fun showResultsScreen() {&#10;        val intent = Intent(this, ResultsActivity::class.java)&#10;        intent.putExtra(&quot;score&quot;, score)&#10;        intent.putExtra(&quot;total&quot;, totalQuestions)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun generateQuestionSequence() {&#10;        // Создаем список: каждая цифра от 0 до 9 по 2 раза&#10;        val numbers = mutableListOf&lt;Int&gt;()&#10;        for (digit in 0..9) {&#10;            numbers.add(digit)&#10;            numbers.add(digit)&#10;        }&#10;&#10;        // Перемешиваем список&#10;        numbers.shuffle()&#10;&#10;        // Проверяем и исправляем подряд идущие одинаковые числа&#10;        for (i in 1 until numbers.size) {&#10;            if (numbers[i] == numbers[i - 1]) {&#10;                // Ищем место для обмена с числом, которое не создаст новую проблему&#10;                for (j in i + 1 until numbers.size) {&#10;                    if (numbers[j] != numbers[i] &amp;&amp;&#10;                        (j == numbers.size - 1 || numbers[j] != numbers[j + 1]) &amp;&amp;&#10;                        (i == 1 || numbers[j] != numbers[i - 2])) {&#10;                        // Меняем местами&#10;                        val temp = numbers[i]&#10;                        numbers[i] = numbers[j]&#10;                        numbers[j] = temp&#10;                        break&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        questionNumbers.clear()&#10;        questionNumbers.addAll(numbers)&#10;        currentQuestionIndex = 0&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.view.View&#10;import android.view.animation.BounceInterpolator&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class NumberRecognitionActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var targetNumber = 1&#10;    private var score = 0 // Правильные ответы с первого раза&#10;    private var totalCorrectAnswers = 0 // Все правильные ответы (вкл��чая с повторными попытками)&#10;    private var currentQuestion = 0&#10;    private val totalQuestions = 20&#10;    private var tts: TextToSpeech? = null&#10;    private var isFirstInit = true // Флаг для первой инициализации&#10;    private var hasTriedCurrentQuestion = false // Фла�� для отслеживания попыток на те��ущем вопросе&#10;&#10;    // Список всех вопросов (каждая цифра от 0 до 9 по 2 раза)&#10;    private val questionNumbers = mutableListOf&lt;Int&gt;()&#10;    private var currentQuestionIndex = 0&#10;&#10;    // Массив прописных чисел&#10;    private val numberWords = arrayOf(&#10;        &quot;ноль&quot;, &quot;один&quot;, &quot;два&quot;, &quot;три&quot;, &quot;четыре&quot;, &quot;пять&quot;,&#10;        &quot;шесть&quot;, &quot;семь&quot;, &quot;восемь&quot;, &quot;девять&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_number_recognition)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        setupBackButton()&#10;        // Убираем startNewQuestion() отсюда - перенесено в onInit()&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            tts?.language = Locale(&quot;ru&quot;, &quot;RU&quot;)&#10;            // Запускаем первый вопрос только при первой инициализации TTS&#10;            if (isFirstInit) {&#10;                generateQuestionSequence()&#10;                startNewQuestion()&#10;                isFirstInit = false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupBackButton() {&#10;        findViewById&lt;View&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun startNewQuestion() {&#10;        if (currentQuestion &gt;= totalQuestions) {&#10;            showResultsScreen()&#10;            return&#10;        }&#10;&#10;        currentQuestion++&#10;        hasTriedCurrentQuestion = false // Сбрасываем флаг для нового вопроса&#10;&#10;        // Скрываем loading и показываем игровой контент при первом вопросе&#10;        if (currentQuestion == 1) {&#10;            findViewById&lt;View&gt;(R.id.loadingContainer).visibility = View.GONE&#10;            findViewById&lt;View&gt;(R.id.gameContainer).visibility = View.VISIBLE&#10;        }&#10;&#10;        // Берем цифру из заранее сгенерированной последовательности&#10;        targetNumber = questionNumbers[currentQuestionIndex]&#10;        currentQuestionIndex++&#10;&#10;        // Обновляем вопрос с прописным числом&#10;        val questionText = &quot;Найди цифру ${numberWords[targetNumber]}&quot;&#10;        findViewById&lt;TextView&gt;(R.id.questionText).text = questionText&#10;&#10;        // Озвучиваем вопрос&#10;        tts?.speak(questionText, TextToSpeech.QUEUE_FLUSH, null, &quot;question&quot;)&#10;&#10;        // Настраиваем кнопку динамика для повторного озвучивания&#10;        findViewById&lt;View&gt;(R.id.speakerButton).setOnClickListener {&#10;            tts?.speak(questionText, TextToSpeech.QUEUE_FLUSH, null, &quot;repeat_question&quot;)&#10;        }&#10;&#10;        // Обновляем прогресс-бар&#10;        val progressBar = findViewById&lt;ProgressBar&gt;(R.id.progressBar)&#10;        progressBar.progress = (currentQuestion * 100) / totalQuestions&#10;&#10;        // Генерируем 4 случайные цифры, одна из которых правильная&#10;        val numbers = generateNumberOptions(targetNumber)&#10;&#10;        // Находим карточки&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        val numberTexts = listOf(&#10;            findViewById&lt;TextView&gt;(R.id.number1),&#10;            findViewById&lt;TextView&gt;(R.id.number2),&#10;            findViewById&lt;TextView&gt;(R.id.number3),&#10;            findViewById&lt;TextView&gt;(R.id.number4)&#10;        )&#10;&#10;        // Заполняем карточки&#10;        for (i in 0..3) {&#10;            numberTexts[i].text = numbers[i].toString()&#10;&#10;            // Сбрасываем цвет карточки&#10;            cards[i].setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))&#10;&#10;            // Добавляем анимацию появления&#10;            animateCardEntrance(cards[i], i * 100L)&#10;&#10;            cards[i].setOnClickListener {&#10;                checkAnswer(numbers[i], cards[i])&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun animateCardEntrance(card: CardView, delay: Long) {&#10;        card.alpha = 0f&#10;        card.scaleX = 0.5f&#10;        card.scaleY = 0.5f&#10;&#10;        card.animate()&#10;            .alpha(1f)&#10;            .scaleX(1f)&#10;            .scaleY(1f)&#10;            .setDuration(300)&#10;            .setStartDelay(delay)&#10;            .setInterpolator(BounceInterpolator())&#10;            .start()&#10;    }&#10;&#10;    private fun generateNumberOptions(correct: Int): List&lt;Int&gt; {&#10;        val options = mutableSetOf&lt;Int&gt;()&#10;        options.add(correct)&#10;&#10;        // Добавляем 3 неправильных варианта из диапазона 0-9&#10;        while (options.size &lt; 4) {&#10;            val randomNum = Random.nextInt(0, 10)&#10;            options.add(randomNum)&#10;        }&#10;&#10;        return options.shuffled()&#10;    }&#10;&#10;    private fun checkAnswer(selectedNumber: Int, selectedCard: CardView) {&#10;        // Отключаем все карточки от наж��тий&#10;        disableAllCards()&#10;&#10;        if (selectedNumber == targetNumber) {&#10;            // Правильный ответ&#10;            totalCorrectAnswers++&#10;&#10;            // Засчитываем правильный ответ с первого раза только если не было попыток&#10;            if (!hasTriedCurrentQuestion) {&#10;                score++&#10;            }&#10;&#10;            animateCorrectAnswer(selectedCard)&#10;            tts?.speak(&quot;Молодец!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;correct&quot;)&#10;&#10;            // Переходим к следующему вопросу через 2 секунды&#10;            findViewById&lt;View&gt;(R.id.card1).postDelayed({&#10;                startNewQuestion()&#10;            }, 2000)&#10;        } else {&#10;            // Неправильный ответ - отмечаем что была попытка&#10;            hasTriedCurrentQuestion = true&#10;&#10;            animateWrongAnswer(selectedCard)&#10;            tts?.speak(&quot;Попробуй ещё раз!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;wrong&quot;)&#10;&#10;            // Через 2 секунды включаем карточки обратно&#10;            findViewById&lt;View&gt;(R.id.card1).postDelayed({&#10;                enableAllCards()&#10;                resetCardColors()&#10;            }, 2000)&#10;        }&#10;    }&#10;&#10;    private fun enableAllCards() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        cards.forEach { it.isClickable = true }&#10;    }&#10;&#10;    private fun resetCardColors() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        cards.forEach {&#10;            it.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))&#10;        }&#10;    }&#10;&#10;    private fun disableAllCards() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        cards.forEach { it.isClickable = false }&#10;    }&#10;&#10;    private fun animateCorrectAnswer(card: CardView) {&#10;        // Зеленый цвет для правильного ответа&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;&#10;        // Анимация увеличения и уменьшения&#10;        val scaleUpX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1f, 1.3f)&#10;        val scaleUpY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1f, 1.3f)&#10;        val scaleDownX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1.3f, 1f)&#10;        val scaleDownY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1.3f, 1f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.play(scaleUpX).with(scaleUpY)&#10;        animatorSet.play(scaleDownX).with(scaleDownY).after(scaleUpX)&#10;        animatorSet.duration = 200&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun animateWrongAnswer(card: CardView) {&#10;        // Красный цвет для неправильного ответа&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_red_light))&#10;&#10;        // Анимация тряски&#10;        val shake = ObjectAnimator.ofFloat(card, &quot;translationX&quot;, 0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 500&#10;        shake.start()&#10;    }&#10;&#10;    private fun showResultsScreen() {&#10;        val intent = Intent(this, ResultsActivity::class.java)&#10;        intent.putExtra(&quot;score&quot;, score)&#10;        intent.putExtra(&quot;total&quot;, totalQuestions)&#10;        intent.putExtra(&quot;parentSection&quot;, &quot;math&quot;) // Указываем, что пришли из раздела математики&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun generateQuestionSequence() {&#10;        // Создаем список: каждая цифра от 0 до 9 по 2 раза&#10;        val numbers = mutableListOf&lt;Int&gt;()&#10;        for (digit in 0..9) {&#10;            numbers.add(digit)&#10;            numbers.add(digit)&#10;        }&#10;&#10;        // Перемешиваем список&#10;        numbers.shuffle()&#10;&#10;        // Проверяем и исправляем подряд идущие одинаковые числа&#10;        for (i in 1 until numbers.size) {&#10;            if (numbers[i] == numbers[i - 1]) {&#10;                // Ищем место для обмена с числом, которое не создаст новую проблему&#10;                for (j in i + 1 until numbers.size) {&#10;                    if (numbers[j] != numbers[i] &amp;&amp;&#10;                        (j == numbers.size - 1 || numbers[j] != numbers[j + 1]) &amp;&amp;&#10;                        (i == 1 || numbers[j] != numbers[i - 2])) {&#10;                        // Меняем местами&#10;                        val temp = numbers[i]&#10;                        numbers[i] = numbers[j]&#10;                        numbers[j] = temp&#10;                        break&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        questionNumbers.clear()&#10;        questionNumbers.addAll(numbers)&#10;        currentQuestionIndex = 0&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/NumberRecognitionActivity_new.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/NumberRecognitionActivity_new.kt" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.os.VibrationEffect&#10;import android.os.Vibrator&#10;import android.os.VibratorManager&#10;import android.speech.tts.TextToSpeech&#10;import android.util.Log&#10;import android.view.View&#10;import android.view.animation.BounceInterpolator&#10;import android.widget.ImageView&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class NumberRecognitionActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var targetNumber = 1&#10;    private var currentQuestion = 0&#10;    private val totalQuestions = 20&#10;    private var tts: TextToSpeech? = null&#10;    private var isTtsReady = false&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private var currentQuestionText = &quot;&quot;&#10;&#10;    // Новые переменные для отслеживания ошибок&#10;    private var correctAnswersCount = 0&#10;    private var answersWithErrors = 0&#10;    private var currentQuestionHasError = false&#10;&#10;    // Список доступных цифр для избежания повторов&#10;    private val availableNumbers = mutableListOf&lt;Int&gt;()&#10;&#10;    // Массив прописных чисел (включая 0)&#10;    private val numberWords = arrayOf(&#10;        &quot;ноль&quot;, &quot;один&quot;, &quot;два&quot;, &quot;три&quot;, &quot;четыре&quot;, &quot;пять&quot;,&#10;        &quot;шесть&quot;, &quot;семь&quot;, &quot;восемь&quot;, &quot;девять&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_number_recognition)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация списка доступных цифр (0-9)&#10;        initializeAvailableNumbers()&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        setupBackButton()&#10;        setupSpeakerButton()&#10;        startNewQuestion()&#10;    }&#10;&#10;    private fun initializeAvailableNumbers() {&#10;        availableNumbers.clear()&#10;        // Добавляем цифры от 0 до 9&#10;        for (i in 0..9) {&#10;            availableNumbers.add(i)&#10;        }&#10;        availableNumbers.shuffle()&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts?.setLanguage(Locale(&quot;ru&quot;))&#10;            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {&#10;                Log.e(&quot;TTS&quot;, &quot;Русский язык не поддерживается, используем английский&quot;)&#10;                tts?.language = Locale.getDefault()&#10;            }&#10;            isTtsReady = true&#10;&#10;            // Озвучиваем вопрос сразу, если он уже готов&#10;            if (currentQuestionText.isNotEmpty()) {&#10;                speakQuestion()&#10;            }&#10;        } else {&#10;            Log.e(&quot;TTS&quot;, &quot;Инициализация TTS не удалась&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupBackButton() {&#10;        findViewById&lt;View&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun setupSpeakerButton() {&#10;        findViewById&lt;ImageView&gt;(R.id.speakerButton).setOnClickListener {&#10;            speakQuestion()&#10;        }&#10;&#10;        findViewById&lt;TextView&gt;(R.id.questionText).setOnClickListener {&#10;            speakQuestion()&#10;        }&#10;    }&#10;&#10;    private fun speakQuestion() {&#10;        if (isTtsReady &amp;&amp; currentQuestionText.isNotEmpty()) {&#10;            tts?.speak(currentQuestionText, TextToSpeech.QUEUE_FLUSH, null, &quot;question&quot;)&#10;        }&#10;    }&#10;&#10;    private fun vibrateOnError() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            val vibratorManager = getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager&#10;            val vibrator = vibratorManager.defaultVibrator&#10;            vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;        } else {&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            val vibrator = getSystemService(Context.VIBRATOR_SERVICE) as Vibrator&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;            } else {&#10;                @Suppress(&quot;DEPRECATION&quot;)&#10;                vibrator.vibrate(200)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startNewQuestion() {&#10;        if (currentQuestion &gt;= totalQuestions) {&#10;            showResultsScreen()&#10;            return&#10;        }&#10;&#10;        currentQuestion++&#10;        currentQuestionHasError = false&#10;&#10;        // Получаем следующую цифру из списка доступных&#10;        if (availableNumbers.isEmpty()) {&#10;            initializeAvailableNumbers()&#10;        }&#10;        targetNumber = availableNumbers.removeAt(0)&#10;&#10;        // Обновляем вопрос с прописным числом&#10;        val questionText = &quot;Найди цифру ${numberWords[targetNumber]}&quot;&#10;        findViewById&lt;TextView&gt;(R.id.questionText).text = questionText&#10;        currentQuestionText = questionText&#10;&#10;        // Озвучиваем вопрос сразу (если TTS готов)&#10;        if (isTtsReady) {&#10;            speakQuestion()&#10;        }&#10;&#10;        // Обновляем прогресс-бар&#10;        val progressBar = findViewById&lt;ProgressBar&gt;(R.id.progressBar)&#10;        progressBar.progress = (currentQuestion * 100) / totalQuestions&#10;&#10;        // Генерируем 4 случайные цифры, одна из которых правильная&#10;        val numbers = generateNumberOptions(targetNumber)&#10;&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        val numberTexts = listOf(&#10;            findViewById&lt;TextView&gt;(R.id.number1),&#10;            findViewById&lt;TextView&gt;(R.id.number2),&#10;            findViewById&lt;TextView&gt;(R.id.number3),&#10;            findViewById&lt;TextView&gt;(R.id.number4)&#10;        )&#10;&#10;        // Заполняем карточки&#10;        for (i in 0..3) {&#10;            numberTexts[i].text = numbers[i].toString()&#10;            cards[i].setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))&#10;            cards[i].isClickable = true&#10;            animateCardEntrance(cards[i], i * 100L)&#10;&#10;            cards[i].setOnClickListener {&#10;                checkAnswer(numbers[i], cards[i])&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun animateCardEntrance(card: CardView, delay: Long) {&#10;        card.alpha = 0f&#10;        card.scaleX = 0.5f&#10;        card.scaleY = 0.5f&#10;&#10;        card.animate()&#10;            .alpha(1f)&#10;            .scaleX(1f)&#10;            .scaleY(1f)&#10;            .setDuration(300)&#10;            .setStartDelay(delay)&#10;            .setInterpolator(BounceInterpolator())&#10;            .start()&#10;    }&#10;&#10;    private fun generateNumberOptions(correct: Int): List&lt;Int&gt; {&#10;        val options = mutableSetOf&lt;Int&gt;()&#10;        options.add(correct)&#10;&#10;        while (options.size &lt; 4) {&#10;            val randomNum = Random.nextInt(0, 10)&#10;            options.add(randomNum)&#10;        }&#10;&#10;        return options.shuffled()&#10;    }&#10;&#10;    private fun checkAnswer(selectedNumber: Int, selectedCard: CardView) {&#10;        if (selectedNumber == targetNumber) {&#10;            // Правильный ответ&#10;            if (currentQuestionHasError) {&#10;                answersWithErrors++&#10;            } else {&#10;                correctAnswersCount++&#10;            }&#10;&#10;            animateCorrectAnswer(selectedCard)&#10;            tts?.speak(&quot;Молодец!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;correct&quot;)&#10;            disableAllCards()&#10;&#10;            handler.postDelayed({&#10;                startNewQuestion()&#10;            }, 2000)&#10;        } else {&#10;            // Неправильный ответ&#10;            currentQuestionHasError = true&#10;            animateWrongAnswer(selectedCard)&#10;            vibrateOnError() // Добавляем вибрацию&#10;            tts?.speak(&quot;Попробуй ещё раз, у тебя получится!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;wrong&quot;)&#10;            selectedCard.isClickable = false&#10;        }&#10;    }&#10;&#10;    private fun disableAllCards() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;        cards.forEach { it.isClickable = false }&#10;    }&#10;&#10;    private fun animateCorrectAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;&#10;        val scaleUpX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1f, 1.3f)&#10;        val scaleUpY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1f, 1.3f)&#10;        val scaleDownX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1.3f, 1f)&#10;        val scaleDownY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1.3f, 1f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.play(scaleUpX).with(scaleUpY)&#10;        animatorSet.play(scaleDownX).with(scaleDownY).after(scaleUpX)&#10;        animatorSet.duration = 200&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun animateWrongAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_red_light))&#10;&#10;        val shake = ObjectAnimator.ofFloat(card, &quot;translationX&quot;, 0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 500&#10;        shake.start()&#10;    }&#10;&#10;    private fun showResultsScreen() {&#10;        val intent = Intent(this, ResultsActivity::class.java)&#10;        intent.putExtra(&quot;score&quot;, correctAnswersCount) // Только правильные ответы без ошибок&#10;        intent.putExtra(&quot;total&quot;, totalQuestions)&#10;        intent.putExtra(&quot;correctAnswersCount&quot;, correctAnswersCount)&#10;        intent.putExtra(&quot;answersWithErrors&quot;, answersWithErrors)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/ProgressManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/ProgressManager.kt" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;&#10;class ProgressManager(context: Context) {&#10;    private val sharedPreferences: SharedPreferences = &#10;        context.getSharedPreferences(&quot;danabala_progress&quot;, Context.MODE_PRIVATE)&#10;&#10;    // Сохранение результатов тренировки&#10;    fun saveTrainingResult(trainingType: String, score: Int, total: Int, correctAnswers: Int, answersWithErrors: Int) {&#10;        val editor = sharedPreferences.edit()&#10;        &#10;        // Увеличиваем счетчик пройденных тренировок&#10;        val completedCount = getCompletedTrainings(trainingType) + 1&#10;        editor.putInt(&quot;${trainingType}_completed&quot;, completedCount)&#10;        &#10;        // Сохраняем лучший результат&#10;        val bestScore = getBestScore(trainingType)&#10;        if (correctAnswers &gt; bestScore) {&#10;            editor.putInt(&quot;${trainingType}_best_score&quot;, correctAnswers)&#10;            editor.putInt(&quot;${trainingType}_best_total&quot;, total)&#10;        }&#10;        &#10;        // Сохраняем общую статистику&#10;        val totalCorrect = getTotalCorrectAnswers(trainingType) + correctAnswers&#10;        val totalQuestions = getTotalQuestions(trainingType) + total&#10;        editor.putInt(&quot;${trainingType}_total_correct&quot;, totalCorrect)&#10;        editor.putInt(&quot;${trainingType}_total_questions&quot;, totalQuestions)&#10;        &#10;        editor.apply()&#10;    }&#10;&#10;    // Получение количества пройденных тренировок&#10;    fun getCompletedTrainings(trainingType: String): Int {&#10;        return sharedPreferences.getInt(&quot;${trainingType}_completed&quot;, 0)&#10;    }&#10;&#10;    // Получение лучшего результата&#10;    fun getBestScore(trainingType: String): Int {&#10;        return sharedPreferences.getInt(&quot;${trainingType}_best_score&quot;, 0)&#10;    }&#10;&#10;    // Получение общей статистики&#10;    fun getTotalCorrectAnswers(trainingType: String): Int {&#10;        return sharedPreferences.getInt(&quot;${trainingType}_total_correct&quot;, 0)&#10;    }&#10;&#10;    fun getTotalQuestions(trainingType: String): Int {&#10;        return sharedPreferences.getInt(&quot;${trainingType}_total_questions&quot;, 0)&#10;    }&#10;&#10;    // Получение процента правильных ответов&#10;    fun getSuccessRate(trainingType: String): Int {&#10;        val total = getTotalQuestions(trainingType)&#10;        val correct = getTotalCorrectAnswers(trainingType)&#10;        return if (total &gt; 0) (correct * 100) / total else 0&#10;    }&#10;&#10;    // Сброс прогресса (для отладки)&#10;    fun resetProgress() {&#10;        sharedPreferences.edit().clear().apply()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/ResultsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/ResultsActivity.kt" />
              <option name="originalContent" value="package com.example.danabala&#10;&#10;import android.animation.Animator&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.animation.ValueAnimator&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.view.View&#10;import android.view.animation.AccelerateDecelerateInterpolator&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class ResultsActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var tts: TextToSpeech? = null&#10;    private val fireworkViews = mutableListOf&lt;View&gt;()&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_results)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        // Получаем результаты&#10;        val score = intent.getIntExtra(&quot;score&quot;, 0)&#10;        val totalQuestions = intent.getIntExtra(&quot;total&quot;, 20)&#10;&#10;        setupResults(score, totalQuestions)&#10;        setupButtons()&#10;&#10;        // Запускаем анимации с задержкой&#10;        findViewById&lt;View&gt;(R.id.main).postDelayed({&#10;            startFireworksAnimation()&#10;        }, 500)&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            tts?.language = Locale(&quot;ru&quot;, &quot;RU&quot;)&#10;&#10;            // Озвучиваем поздравление&#10;            val score = intent.getIntExtra(&quot;score&quot;, 0)&#10;            val message = when {&#10;                score &gt;= 20 -&gt; &quot;Отлично! Ты справился идеально!&quot;&#10;                score &gt;= 18 -&gt; &quot;Отлично! Ты справился почти идеально!&quot;&#10;                score &gt;= 15 -&gt; &quot;Молодец! Очень хороший результат!&quot;&#10;                score &gt;= 10 -&gt; &quot;Хорошо! Продолжай тренироваться!&quot;&#10;                else -&gt; &quot;Неплохо! В следующий раз получится лучше!&quot;&#10;            }&#10;&#10;            tts?.speak(message, TextToSpeech.QUEUE_FLUSH, null, &quot;congratulation&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupResults(score: Int, total: Int) {&#10;        val percentage = (score * 100) / total&#10;        val stars = calculateStars(percentage)&#10;&#10;        // Обновляем статистику - теперь показываем правильные ответы с первого раза&#10;        findViewById&lt;TextView&gt;(R.id.scoreText).text = &quot;Правильных ответов: $score из $total&quot;&#10;        findViewById&lt;TextView&gt;(R.id.percentageText).text = &quot;$percentage%&quot;&#10;&#10;        // Настраиваем звездочки&#10;        setupStars(stars)&#10;&#10;        // Обновляем сообщение в з��висимости от количества звезд&#10;        val messageText = when {&#10;            stars == 5 -&gt; &quot;Превосходно! &quot;&#10;            stars == 4 -&gt; &quot;Отлично! ⭐&quot;&#10;            stars == 3 -&gt; &quot;Хорошо! &quot;&#10;            stars == 2 -&gt; &quot;Неплохо! &quot;&#10;            else -&gt; &quot;Попробуй ещё! &quot;&#10;        }&#10;        findViewById&lt;TextView&gt;(R.id.congratulationText).text = messageText&#10;    }&#10;&#10;    private fun calculateStars(percentage: Int): Int {&#10;        return when {&#10;            percentage &gt;= 90 -&gt; 5  // 90% и выше - 5 звезд&#10;            percentage &gt;= 75 -&gt; 4  // 75-89% - 4 звезды&#10;            percentage &gt;= 60 -&gt; 3  // 60-74% - 3 звезды&#10;            percentage &gt;= 45 -&gt; 2  // 45-59% - 2 звезды&#10;            else -&gt; 1              // менее 45% - 1 звезда&#10;        }&#10;    }&#10;&#10;    private fun setupStars(earnedStars: Int) {&#10;        val starViews = listOf(&#10;            findViewById&lt;ImageView&gt;(R.id.star1),&#10;            findViewById&lt;ImageView&gt;(R.id.star2),&#10;            findViewById&lt;ImageView&gt;(R.id.star3),&#10;            findViewById&lt;ImageView&gt;(R.id.star4),&#10;            findViewById&lt;ImageView&gt;(R.id.star5)&#10;        )&#10;&#10;        // Анимируем появление звезд по одной&#10;        starViews.forEachIndexed { index, star -&gt;&#10;            star.alpha = 0f&#10;            star.scaleX = 0f&#10;            star.scaleY = 0f&#10;&#10;            if (index &lt; earnedStars) {&#10;                // Золотая звезда&#10;                star.setImageResource(android.R.drawable.btn_star_big_on)&#10;&#10;                star.postDelayed({&#10;                    animateStarAppearance(star)&#10;                }, (index * 200L) + 1000)&#10;            } else {&#10;                // Серая звезда&#10;                star.setImageResource(android.R.drawable.btn_star_big_off)&#10;&#10;                star.postDelayed({&#10;                    star.animate()&#10;                        .alpha(0.3f)&#10;                        .scaleX(1f)&#10;                        .scaleY(1f)&#10;                        .setDuration(200)&#10;                        .start()&#10;                }, (index * 200L) + 1000)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun animateStarAppearance(star: ImageView) {&#10;        val scaleX = ObjectAnimator.ofFloat(star, &quot;scaleX&quot;, 0f, 1.2f, 1f)&#10;        val scaleY = ObjectAnimator.ofFloat(star, &quot;scaleY&quot;, 0f, 1.2f, 1f)&#10;        val alpha = ObjectAnimator.ofFloat(star, &quot;alpha&quot;, 0f, 1f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.playTogether(scaleX, scaleY, alpha)&#10;        animatorSet.duration = 400&#10;        animatorSet.interpolator = AccelerateDecelerateInterpolator()&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun setupButtons() {&#10;        findViewById&lt;CardView&gt;(R.id.retryButton).setOnClickListener {&#10;            val intent = Intent(this, NumberRecognitionActivity::class.java)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.backToMenuButton).setOnClickListener {&#10;            val intent = Intent(this, MathExercisesActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun startFireworksAnimation() {&#10;        val rootView = findViewById&lt;View&gt;(R.id.main)&#10;&#10;        // Создаем 15 фейерверков&#10;        repeat(15) {&#10;            createFirework(rootView)&#10;        }&#10;    }&#10;&#10;    private fun createFirework(parent: View) {&#10;        val firework = View(this)&#10;        firework.setBackgroundResource(android.R.drawable.star_big_on)&#10;&#10;        val size = Random.nextInt(20, 40)&#10;        firework.layoutParams = android.widget.FrameLayout.LayoutParams(size, size)&#10;&#10;        // Случайная позиция&#10;        val startX = Random.nextFloat() * parent.width&#10;        val startY = parent.height.toFloat()&#10;        val endY = Random.nextFloat() * (parent.height * 0.6f)&#10;&#10;        firework.x = startX&#10;        firework.y = startY&#10;        firework.alpha = 0f&#10;&#10;        (parent as android.widget.FrameLayout).addView(firework)&#10;        fireworkViews.add(firework)&#10;&#10;        // Анимация полета вверх&#10;        val translateY = ObjectAnimator.ofFloat(firework, &quot;y&quot;, startY, endY)&#10;        val alpha = ObjectAnimator.ofFloat(firework, &quot;alpha&quot;, 0f, 1f, 0f)&#10;        val scaleX = ObjectAnimator.ofFloat(firework, &quot;scaleX&quot;, 0.5f, 1.5f, 0f)&#10;        val scaleY = ObjectAnimator.ofFloat(firework, &quot;scaleY&quot;, 0.5f, 1.5f, 0f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.playTogether(translateY, alpha, scaleX, scaleY)&#10;        animatorSet.duration = Random.nextLong(1500, 2500)&#10;        animatorSet.startDelay = Random.nextLong(0, 2000)&#10;&#10;        animatorSet.addListener(object : Animator.AnimatorListener {&#10;            override fun onAnimationEnd(animation: Animator) {&#10;                (parent as android.widget.FrameLayout).removeView(firework)&#10;                fireworkViews.remove(firework)&#10;            }&#10;            override fun onAnimationStart(animation: Animator) {}&#10;            override fun onAnimationCancel(animation: Animator) {}&#10;            override fun onAnimationRepeat(animation: Animator) {}&#10;        })&#10;&#10;        animatorSet.start()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;&#10;        // Очищаем фейерверки&#10;        fireworkViews.clear()&#10;&#10;        super.onDestroy()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.animation.Animator&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.animation.ValueAnimator&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.view.View&#10;import android.view.animation.AccelerateDecelerateInterpolator&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class ResultsActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var tts: TextToSpeech? = null&#10;    private val fireworkViews = mutableListOf&lt;View&gt;()&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_results)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        // Получаем результаты&#10;        val score = intent.getIntExtra(&quot;score&quot;, 0)&#10;        val totalQuestions = intent.getIntExtra(&quot;total&quot;, 20)&#10;&#10;        setupResults(score, totalQuestions)&#10;        setupButtons()&#10;&#10;        // Запускаем анимации с задержкой&#10;        findViewById&lt;View&gt;(R.id.main).postDelayed({&#10;            startFireworksAnimation()&#10;        }, 500)&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            tts?.language = Locale(&quot;ru&quot;, &quot;RU&quot;)&#10;&#10;            // Озвучиваем поздравление&#10;            val score = intent.getIntExtra(&quot;score&quot;, 0)&#10;            val message = when {&#10;                score &gt;= 20 -&gt; &quot;Отлично! Ты справился идеально!&quot;&#10;                score &gt;= 18 -&gt; &quot;Отлично! Ты справился почти идеально!&quot;&#10;                score &gt;= 15 -&gt; &quot;Молодец! Очень хороший результат!&quot;&#10;                score &gt;= 10 -&gt; &quot;Хорошо! Продолжай тренироваться!&quot;&#10;                else -&gt; &quot;Неплохо! В следующий раз получится лучше!&quot;&#10;            }&#10;&#10;            tts?.speak(message, TextToSpeech.QUEUE_FLUSH, null, &quot;congratulation&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupResults(score: Int, total: Int) {&#10;        val percentage = (score * 100) / total&#10;        val stars = calculateStars(percentage)&#10;&#10;        // Обновляем статистику - теперь показываем правильные ответы с первого раза&#10;        findViewById&lt;TextView&gt;(R.id.scoreText).text = &quot;Правильных ответов: $score из $total&quot;&#10;        findViewById&lt;TextView&gt;(R.id.percentageText).text = &quot;$percentage%&quot;&#10;&#10;        // Настраиваем звездочки&#10;        setupStars(stars)&#10;&#10;        // Обновляем сообщение в з��висимости от количества звезд&#10;        val messageText = when {&#10;            stars == 5 -&gt; &quot;Превосходно! &quot;&#10;            stars == 4 -&gt; &quot;Отлично! ⭐&quot;&#10;            stars == 3 -&gt; &quot;Хорошо! &quot;&#10;            stars == 2 -&gt; &quot;Неплохо! &quot;&#10;            else -&gt; &quot;Попробуй ещё! &quot;&#10;        }&#10;        findViewById&lt;TextView&gt;(R.id.congratulationText).text = messageText&#10;    }&#10;&#10;    private fun calculateStars(percentage: Int): Int {&#10;        return when {&#10;            percentage &gt;= 90 -&gt; 5  // 90% и выше - 5 звезд&#10;            percentage &gt;= 75 -&gt; 4  // 75-89% - 4 звезды&#10;            percentage &gt;= 60 -&gt; 3  // 60-74% - 3 звезды&#10;            percentage &gt;= 45 -&gt; 2  // 45-59% - 2 звезды&#10;            else -&gt; 1              // менее 45% - 1 звезда&#10;        }&#10;    }&#10;&#10;    private fun setupStars(earnedStars: Int) {&#10;        val starViews = listOf(&#10;            findViewById&lt;ImageView&gt;(R.id.star1),&#10;            findViewById&lt;ImageView&gt;(R.id.star2),&#10;            findViewById&lt;ImageView&gt;(R.id.star3),&#10;            findViewById&lt;ImageView&gt;(R.id.star4),&#10;            findViewById&lt;ImageView&gt;(R.id.star5)&#10;        )&#10;&#10;        // Анимируем появление звезд по одной&#10;        starViews.forEachIndexed { index, star -&gt;&#10;            star.alpha = 0f&#10;            star.scaleX = 0f&#10;            star.scaleY = 0f&#10;&#10;            if (index &lt; earnedStars) {&#10;                // Золотая звезда&#10;                star.setImageResource(android.R.drawable.btn_star_big_on)&#10;&#10;                star.postDelayed({&#10;                    animateStarAppearance(star)&#10;                }, (index * 200L) + 1000)&#10;            } else {&#10;                // Серая звезда&#10;                star.setImageResource(android.R.drawable.btn_star_big_off)&#10;&#10;                star.postDelayed({&#10;                    star.animate()&#10;                        .alpha(0.3f)&#10;                        .scaleX(1f)&#10;                        .scaleY(1f)&#10;                        .setDuration(200)&#10;                        .start()&#10;                }, (index * 200L) + 1000)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun animateStarAppearance(star: ImageView) {&#10;        val scaleX = ObjectAnimator.ofFloat(star, &quot;scaleX&quot;, 0f, 1.2f, 1f)&#10;        val scaleY = ObjectAnimator.ofFloat(star, &quot;scaleY&quot;, 0f, 1.2f, 1f)&#10;        val alpha = ObjectAnimator.ofFloat(star, &quot;alpha&quot;, 0f, 1f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.playTogether(scaleX, scaleY, alpha)&#10;        animatorSet.duration = 400&#10;        animatorSet.interpolator = AccelerateDecelerateInterpolator()&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun setupButtons() {&#10;        findViewById&lt;CardView&gt;(R.id.retryButton).setOnClickListener {&#10;            val intent = Intent(this, NumberRecognitionActivity::class.java)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.backToMenuButton).setOnClickListener {&#10;            // Получаем информацию о родительском разделе&#10;            val parentSection = intent.getStringExtra(&quot;parentSection&quot;) ?: &quot;math&quot;&#10;            &#10;            val intent = when (parentSection) {&#10;                &quot;reading&quot; -&gt; Intent(this, ReadingExercisesActivity::class.java)&#10;                else -&gt; Intent(this, MathExercisesActivity::class.java) // по умолчанию математика&#10;            }&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun startFireworksAnimation() {&#10;        val rootView = findViewById&lt;View&gt;(R.id.main)&#10;&#10;        // Создаем 15 фейерверков&#10;        repeat(15) {&#10;            createFirework(rootView)&#10;        }&#10;    }&#10;&#10;    private fun createFirework(parent: View) {&#10;        val firework = View(this)&#10;        firework.setBackgroundResource(android.R.drawable.star_big_on)&#10;&#10;        val size = Random.nextInt(20, 40)&#10;        firework.layoutParams = android.widget.FrameLayout.LayoutParams(size, size)&#10;&#10;        // Случайная позиция&#10;        val startX = Random.nextFloat() * parent.width&#10;        val startY = parent.height.toFloat()&#10;        val endY = Random.nextFloat() * (parent.height * 0.6f)&#10;&#10;        firework.x = startX&#10;        firework.y = startY&#10;        firework.alpha = 0f&#10;&#10;        (parent as android.widget.FrameLayout).addView(firework)&#10;        fireworkViews.add(firework)&#10;&#10;        // Анимация полета вверх&#10;        val translateY = ObjectAnimator.ofFloat(firework, &quot;y&quot;, startY, endY)&#10;        val alpha = ObjectAnimator.ofFloat(firework, &quot;alpha&quot;, 0f, 1f, 0f)&#10;        val scaleX = ObjectAnimator.ofFloat(firework, &quot;scaleX&quot;, 0.5f, 1.5f, 0f)&#10;        val scaleY = ObjectAnimator.ofFloat(firework, &quot;scaleY&quot;, 0.5f, 1.5f, 0f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.playTogether(translateY, alpha, scaleX, scaleY)&#10;        animatorSet.duration = Random.nextLong(1500, 2500)&#10;        animatorSet.startDelay = Random.nextLong(0, 2000)&#10;&#10;        animatorSet.addListener(object : Animator.AnimatorListener {&#10;            override fun onAnimationEnd(animation: Animator) {&#10;                (parent as android.widget.FrameLayout).removeView(firework)&#10;                fireworkViews.remove(firework)&#10;            }&#10;            override fun onAnimationStart(animation: Animator) {}&#10;            override fun onAnimationCancel(animation: Animator) {}&#10;            override fun onAnimationRepeat(animation: Animator) {}&#10;        })&#10;&#10;        animatorSet.start()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;&#10;        // Очищаем фейерверки&#10;        fireworkViews.clear()&#10;&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/AppDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/AppDatabase.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local&#10;&#10;import androidx.room.Database&#10;import androidx.room.Room&#10;import androidx.room.RoomDatabase&#10;import androidx.room.TypeConverters&#10;import android.content.Context&#10;import com.example.danabala.data.local.dao.ExerciseResultDao&#10;import com.example.danabala.data.local.dao.UserDao&#10;import com.example.danabala.data.local.entity.ExerciseResultEntity&#10;import com.example.danabala.data.local.entity.UserEntity&#10;&#10;/**&#10; * Основная база данных приложения&#10; */&#10;@Database(&#10;    entities = [UserEntity::class, ExerciseResultEntity::class],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;@TypeConverters(Converters::class)&#10;abstract class AppDatabase : RoomDatabase() {&#10;    abstract fun userDao(): UserDao&#10;    abstract fun exerciseResultDao(): ExerciseResultDao&#10;&#10;    companion object {&#10;        const val DATABASE_NAME = &quot;danabala_database&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/Converters.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/Converters.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local&#10;&#10;import androidx.room.TypeConverter&#10;import com.example.danabala.domain.model.Grade&#10;&#10;/**&#10; * Конверторы типов для Room базы данных&#10; */&#10;class Converters {&#10;    @TypeConverter&#10;    fun fromGrade(grade: Grade): String = grade.name&#10;    &#10;    @TypeConverter&#10;    fun toGrade(gradeName: String): Grade = Grade.valueOf(gradeName)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/PreferencesManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/PreferencesManager.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Менеджер для работы с SharedPreferences&#10; */&#10;@Singleton&#10;class PreferencesManager @Inject constructor(&#10;    @ApplicationContext context: Context&#10;) {&#10;    private val prefs: SharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;    &#10;    var currentUserId: String?&#10;        get() = prefs.getString(KEY_CURRENT_USER_ID, null)&#10;        set(value) = prefs.edit().putString(KEY_CURRENT_USER_ID, value).apply()&#10;    &#10;    var isFirstLaunch: Boolean&#10;        get() = prefs.getBoolean(KEY_FIRST_LAUNCH, true)&#10;        set(value) = prefs.edit().putBoolean(KEY_FIRST_LAUNCH, value).apply()&#10;    &#10;    var soundEnabled: Boolean&#10;        get() = prefs.getBoolean(KEY_SOUND_ENABLED, true)&#10;        set(value) = prefs.edit().putBoolean(KEY_SOUND_ENABLED, value).apply()&#10;    &#10;    companion object {&#10;        private const val PREFS_NAME = &quot;danabala_prefs&quot;&#10;        private const val KEY_CURRENT_USER_ID = &quot;current_user_id&quot;&#10;        private const val KEY_FIRST_LAUNCH = &quot;first_launch&quot;&#10;        private const val KEY_SOUND_ENABLED = &quot;sound_enabled&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/dao/ExerciseResultDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/dao/ExerciseResultDao.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local.dao&#10;&#10;import androidx.room.*&#10;import com.example.danabala.data.local.entity.ExerciseResultEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface ExerciseResultDao {&#10;    @Query(&quot;SELECT * FROM exercise_results WHERE userId = :userId ORDER BY completedAt DESC&quot;)&#10;    fun getUserResults(userId: String): Flow&lt;List&lt;ExerciseResultEntity&gt;&gt;&#10;    &#10;    @Query(&quot;SELECT * FROM exercise_results WHERE userId = :userId AND exerciseId = :exerciseId ORDER BY completedAt DESC&quot;)&#10;    fun getUserResultsForExercise(userId: String, exerciseId: String): Flow&lt;List&lt;ExerciseResultEntity&gt;&gt;&#10;    &#10;    @Insert&#10;    suspend fun insertResult(result: ExerciseResultEntity)&#10;    &#10;    @Query(&quot;DELETE FROM exercise_results WHERE userId = :userId&quot;)&#10;    suspend fun deleteUserResults(userId: String)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/dao/UserDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/dao/UserDao.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local.dao&#10;&#10;import androidx.room.*&#10;import com.example.danabala.data.local.entity.UserEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface UserDao {&#10;    @Query(&quot;SELECT * FROM users&quot;)&#10;    fun getAllUsers(): Flow&lt;List&lt;UserEntity&gt;&gt;&#10;    &#10;    @Query(&quot;SELECT * FROM users WHERE id = :id&quot;)&#10;    suspend fun getUserById(id: String): UserEntity?&#10;    &#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertUser(user: UserEntity)&#10;    &#10;    @Update&#10;    suspend fun updateUser(user: UserEntity)&#10;    &#10;    @Query(&quot;DELETE FROM users WHERE id = :id&quot;)&#10;    suspend fun deleteUser(id: String)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/entity/ExerciseResultEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/entity/ExerciseResultEntity.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;import com.example.danabala.domain.model.ExerciseResult&#10;&#10;@Entity(tableName = &quot;exercise_results&quot;)&#10;data class ExerciseResultEntity(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Long = 0,&#10;    val exerciseId: String,&#10;    val userId: String,&#10;    val score: Int,&#10;    val maxScore: Int,&#10;    val timeSpentSeconds: Int,&#10;    val completedAt: Long,&#10;    val mistakes: String // JSON строка для хранения списка ошибок&#10;)&#10;&#10;fun ExerciseResultEntity.toDomain(): ExerciseResult = ExerciseResult(&#10;    exerciseId = exerciseId,&#10;    userId = userId,&#10;    score = score,&#10;    maxScore = maxScore,&#10;    timeSpentSeconds = timeSpentSeconds,&#10;    completedAt = completedAt,&#10;    mistakes = mistakes.split(&quot;,&quot;).filter { it.isNotBlank() }&#10;)&#10;&#10;fun ExerciseResult.toEntity(): ExerciseResultEntity = ExerciseResultEntity(&#10;    exerciseId = exerciseId,&#10;    userId = userId,&#10;    score = score,&#10;    maxScore = maxScore,&#10;    timeSpentSeconds = timeSpentSeconds,&#10;    completedAt = completedAt,&#10;    mistakes = mistakes.joinToString(&quot;,&quot;)&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/entity/UserEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/entity/UserEntity.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;import com.example.danabala.domain.model.Grade&#10;import com.example.danabala.domain.model.User&#10;&#10;@Entity(tableName = &quot;users&quot;)&#10;data class UserEntity(&#10;    @PrimaryKey&#10;    val id: String,&#10;    val name: String,&#10;    val age: Int,&#10;    val grade: Grade,&#10;    val avatarUrl: String?,&#10;    val createdAt: Long&#10;)&#10;&#10;fun UserEntity.toDomain(): User = User(&#10;    id = id,&#10;    name = name,&#10;    age = age,&#10;    grade = grade,&#10;    avatarUrl = avatarUrl,&#10;    createdAt = createdAt&#10;)&#10;&#10;fun User.toEntity(): UserEntity = UserEntity(&#10;    id = id,&#10;    name = name,&#10;    age = age,&#10;    grade = grade,&#10;    avatarUrl = avatarUrl,&#10;    createdAt = createdAt&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/repository/ExerciseRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/repository/ExerciseRepositoryImpl.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.repository&#10;&#10;import com.example.danabala.data.local.AppDatabase&#10;import com.example.danabala.data.local.entity.toDomain&#10;import com.example.danabala.data.local.entity.toEntity&#10;import com.example.danabala.domain.model.Exercise&#10;import com.example.danabala.domain.model.ExerciseResult&#10;import com.example.danabala.domain.model.ExerciseType&#10;import com.example.danabala.domain.model.Grade&#10;import com.example.danabala.domain.repository.ExerciseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flowOf&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Реализация репозитория упражнений&#10; */&#10;@Singleton&#10;class ExerciseRepositoryImpl @Inject constructor(&#10;    private val database: AppDatabase&#10;) : ExerciseRepository {&#10;&#10;    private val exerciseResultDao = database.exerciseResultDao()&#10;&#10;    // Временно используем статические данные для упражнений&#10;    // В будущем можно добавить загрузку с сервера или из локальных файлов&#10;    private val staticExercises = listOf(&#10;        Exercise(&#10;            id = &quot;math_add_1&quot;,&#10;            title = &quot;Сложение до 10&quot;,&#10;            description = &quot;Учимся складывать числа от 1 до 10&quot;,&#10;            type = ExerciseType.MATH_ADDITION,&#10;            difficulty = com.example.danabala.domain.model.Difficulty.EASY,&#10;            targetGrades = listOf(Grade.PRESCHOOL_5_6, Grade.GRADE_1),&#10;            estimatedDurationMinutes = 10&#10;        ),&#10;        Exercise(&#10;            id = &quot;reading_letters_1&quot;,&#10;            title = &quot;Изучаем буквы А-Я&quot;,&#10;            description = &quot;Знакомимся с русским алфавитом&quot;,&#10;            type = ExerciseType.READING_LETTERS,&#10;            difficulty = com.example.danabala.domain.model.Difficulty.EASY,&#10;            targetGrades = listOf(Grade.PRESCHOOL_4_5, Grade.PRESCHOOL_5_6),&#10;            estimatedDurationMinutes = 15&#10;        )&#10;    )&#10;&#10;    override suspend fun getExercisesByType(type: ExerciseType): Flow&lt;List&lt;Exercise&gt;&gt; {&#10;        return flowOf(staticExercises.filter { it.type == type })&#10;    }&#10;&#10;    override suspend fun getExercisesByGrade(grade: Grade): Flow&lt;List&lt;Exercise&gt;&gt; {&#10;        return flowOf(staticExercises.filter { grade in it.targetGrades })&#10;    }&#10;&#10;    override suspend fun getExerciseById(id: String): Result&lt;Exercise?&gt; {&#10;        return try {&#10;            val exercise = staticExercises.find { it.id == id }&#10;            Result.success(exercise)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun saveExerciseResult(result: ExerciseResult): Result&lt;Unit&gt; {&#10;        return try {&#10;            exerciseResultDao.insertResult(result.toEntity())&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun getUserResults(userId: String): Flow&lt;List&lt;ExerciseResult&gt;&gt; {&#10;        return exerciseResultDao.getUserResults(userId).map { entities -&gt;&#10;            entities.map { it.toDomain() }&#10;        }&#10;    }&#10;&#10;    override suspend fun getUserResultsForExercise(userId: String, exerciseId: String): Flow&lt;List&lt;ExerciseResult&gt;&gt; {&#10;        return exerciseResultDao.getUserResultsForExercise(userId, exerciseId).map { entities -&gt;&#10;            entities.map { it.toDomain() }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/repository/UserRepositoryImpl.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.repository&#10;&#10;import com.example.danabala.data.local.AppDatabase&#10;import com.example.danabala.data.local.PreferencesManager&#10;import com.example.danabala.data.local.entity.toDomain&#10;import com.example.danabala.data.local.entity.toEntity&#10;import com.example.danabala.domain.model.User&#10;import com.example.danabala.domain.repository.UserRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Реализация репозитория пользователей&#10; */&#10;@Singleton&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val database: AppDatabase,&#10;    private val preferencesManager: PreferencesManager&#10;) : UserRepository {&#10;&#10;    private val userDao = database.userDao()&#10;&#10;    override suspend fun createUser(user: User): Result&lt;Unit&gt; {&#10;        return try {&#10;            userDao.insertUser(user.toEntity())&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun getUserById(id: String): Result&lt;User?&gt; {&#10;        return try {&#10;            val user = userDao.getUserById(id)?.toDomain()&#10;            Result.success(user)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun getAllUsers(): Flow&lt;List&lt;User&gt;&gt; {&#10;        return userDao.getAllUsers().map { entities -&gt;&#10;            entities.map { it.toDomain() }&#10;        }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User): Result&lt;Unit&gt; {&#10;        return try {&#10;            userDao.updateUser(user.toEntity())&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun deleteUser(id: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            userDao.deleteUser(id)&#10;            // Если удаляемый пользователь был текущим, сбрасываем настройку&#10;            if (preferencesManager.currentUserId == id) {&#10;                preferencesManager.currentUserId = null&#10;            }&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun getCurrentUser(): Flow&lt;User?&gt; {&#10;        return userDao.getAllUsers().map { users -&gt;&#10;            val currentUserId = preferencesManager.currentUserId&#10;            users.find { it.id == currentUserId }?.toDomain()&#10;        }&#10;    }&#10;&#10;    override suspend fun setCurrentUser(userId: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            preferencesManager.currentUserId = userId&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/di/DatabaseModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/di/DatabaseModule.kt" />
              <option name="updatedContent" value="package com.example.danabala.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.example.danabala.data.local.AppDatabase&#10;import com.example.danabala.data.local.dao.ExerciseResultDao&#10;import com.example.danabala.data.local.dao.UserDao&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * DI модуль для базы данных&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object DatabaseModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase {&#10;        return Room.databaseBuilder(&#10;            context,&#10;            AppDatabase::class.java,&#10;            AppDatabase.DATABASE_NAME&#10;        ).build()&#10;    }&#10;&#10;    @Provides&#10;    fun provideUserDao(database: AppDatabase): UserDao = database.userDao()&#10;&#10;    @Provides&#10;    fun provideExerciseResultDao(database: AppDatabase): ExerciseResultDao = database.exerciseResultDao()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/di/RepositoryModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/di/RepositoryModule.kt" />
              <option name="updatedContent" value="package com.example.danabala.di&#10;&#10;import com.example.danabala.data.repository.ExerciseRepositoryImpl&#10;import com.example.danabala.data.repository.UserRepositoryImpl&#10;import com.example.danabala.domain.repository.ExerciseRepository&#10;import com.example.danabala.domain.repository.UserRepository&#10;import dagger.Binds&#10;import dagger.Module&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * DI модуль для связывания интерфейсов репозиториев с их реализациями&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;abstract class RepositoryModule {&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindUserRepository(userRepositoryImpl: UserRepositoryImpl): UserRepository&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindExerciseRepository(exerciseRepositoryImpl: ExerciseRepositoryImpl): ExerciseRepository&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/model/Exercise.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/model/Exercise.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.model&#10;&#10;/**&#10; * Базовая модель тренировки&#10; */&#10;data class Exercise(&#10;    val id: String,&#10;    val title: String,&#10;    val description: String,&#10;    val type: ExerciseType,&#10;    val difficulty: Difficulty,&#10;    val targetGrades: List&lt;Grade&gt;,&#10;    val estimatedDurationMinutes: Int,&#10;    val iconResId: Int? = null&#10;)&#10;&#10;/**&#10; * Типы тренировок&#10; */&#10;enum class ExerciseType {&#10;    MATH_ADDITION,      // Сложение&#10;    MATH_SUBTRACTION,   // Вычитание&#10;    MATH_MULTIPLICATION,// Умножение&#10;    MATH_DIVISION,      // Деление&#10;    MATH_COUNTING,      // Счет&#10;    READING_LETTERS,    // Изучение букв&#10;    READING_SYLLABLES,  // Слоги&#10;    READING_WORDS,      // Слова&#10;    READING_SENTENCES,  // Предложения&#10;    READING_COMPREHENSION // Понимание прочитанного&#10;}&#10;&#10;/**&#10; * Уровень сложности&#10; */&#10;enum class Difficulty {&#10;    EASY,&#10;    MEDIUM,&#10;    HARD&#10;}&#10;&#10;/**&#10; * Результат выполнения тренировки&#10; */&#10;data class ExerciseResult(&#10;    val exerciseId: String,&#10;    val userId: String,&#10;    val score: Int,&#10;    val maxScore: Int,&#10;    val timeSpentSeconds: Int,&#10;    val completedAt: Long = System.currentTimeMillis(),&#10;    val mistakes: List&lt;String&gt; = emptyList()&#10;) {&#10;    val percentage: Float&#10;        get() = if (maxScore &gt; 0) (score.toFloat() / maxScore) * 100 else 0f&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/model/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/model/User.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.model&#10;&#10;/**&#10; * Базовая модель пользователя (ребенка)&#10; */&#10;data class User(&#10;    val id: String,&#10;    val name: String,&#10;    val age: Int,&#10;    val grade: Grade,&#10;    val avatarUrl: String? = null,&#10;    val createdAt: Long = System.currentTimeMillis()&#10;)&#10;&#10;/**&#10; * Класс обучения (дошкольник/школьник)&#10; */&#10;enum class Grade {&#10;    PRESCHOOL_3_4,    // 3-4 года&#10;    PRESCHOOL_4_5,    // 4-5 лет&#10;    PRESCHOOL_5_6,    // 5-6 лет&#10;    GRADE_1,          // 1 класс&#10;    GRADE_2,          // 2 класс&#10;    GRADE_3,          // 3 класс&#10;    GRADE_4           // 4 класс&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/repository/ExerciseRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/repository/ExerciseRepository.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.repository&#10;&#10;import com.example.danabala.domain.model.Exercise&#10;import com.example.danabala.domain.model.ExerciseResult&#10;import com.example.danabala.domain.model.ExerciseType&#10;import com.example.danabala.domain.model.Grade&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Репозиторий для работы с упражнениями и результатами&#10; */&#10;interface ExerciseRepository {&#10;    suspend fun getExercisesByType(type: ExerciseType): Flow&lt;List&lt;Exercise&gt;&gt;&#10;    suspend fun getExercisesByGrade(grade: Grade): Flow&lt;List&lt;Exercise&gt;&gt;&#10;    suspend fun getExerciseById(id: String): Result&lt;Exercise?&gt;&#10;    suspend fun saveExerciseResult(result: ExerciseResult): Result&lt;Unit&gt;&#10;    suspend fun getUserResults(userId: String): Flow&lt;List&lt;ExerciseResult&gt;&gt;&#10;    suspend fun getUserResultsForExercise(userId: String, exerciseId: String): Flow&lt;List&lt;ExerciseResult&gt;&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/repository/UserRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/repository/UserRepository.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.repository&#10;&#10;import com.example.danabala.domain.model.User&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Репозиторий для работы с пользователями&#10; */&#10;interface UserRepository {&#10;    suspend fun createUser(user: User): Result&lt;Unit&gt;&#10;    suspend fun getUserById(id: String): Result&lt;User?&gt;&#10;    suspend fun getAllUsers(): Flow&lt;List&lt;User&gt;&gt;&#10;    suspend fun updateUser(user: User): Result&lt;Unit&gt;&#10;    suspend fun deleteUser(id: String): Result&lt;Unit&gt;&#10;    suspend fun getCurrentUser(): Flow&lt;User?&gt;&#10;    suspend fun setCurrentUser(userId: String): Result&lt;Unit&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/usecase/ExerciseUseCases.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/usecase/ExerciseUseCases.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.usecase&#10;&#10;import com.example.danabala.domain.model.Exercise&#10;import com.example.danabala.domain.model.ExerciseResult&#10;import com.example.danabala.domain.model.ExerciseType&#10;import com.example.danabala.domain.model.Grade&#10;import com.example.danabala.domain.repository.ExerciseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use Cases для работы с упражнениями&#10; */&#10;class GetExercisesByTypeUseCase @Inject constructor(&#10;    private val exerciseRepository: ExerciseRepository&#10;) {&#10;    operator fun invoke(type: ExerciseType): Flow&lt;List&lt;Exercise&gt;&gt; = &#10;        exerciseRepository.getExercisesByType(type)&#10;}&#10;&#10;class GetExercisesByGradeUseCase @Inject constructor(&#10;    private val exerciseRepository: ExerciseRepository&#10;) {&#10;    operator fun invoke(grade: Grade): Flow&lt;List&lt;Exercise&gt;&gt; = &#10;        exerciseRepository.getExercisesByGrade(grade)&#10;}&#10;&#10;class SaveExerciseResultUseCase @Inject constructor(&#10;    private val exerciseRepository: ExerciseRepository&#10;) {&#10;    suspend operator fun invoke(result: ExerciseResult): Result&lt;Unit&gt; = &#10;        exerciseRepository.saveExerciseResult(result)&#10;}&#10;&#10;class GetUserProgressUseCase @Inject constructor(&#10;    private val exerciseRepository: ExerciseRepository&#10;) {&#10;    operator fun invoke(userId: String): Flow&lt;List&lt;ExerciseResult&gt;&gt; = &#10;        exerciseRepository.getUserResults(userId)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/usecase/UserUseCases.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/usecase/UserUseCases.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.usecase&#10;&#10;import com.example.danabala.domain.model.User&#10;import com.example.danabala.domain.repository.UserRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use Cases для работы с пользователями&#10; */&#10;class GetCurrentUserUseCase @Inject constructor(&#10;    private val userRepository: UserRepository&#10;) {&#10;    operator fun invoke(): Flow&lt;User?&gt; = userRepository.getCurrentUser()&#10;}&#10;&#10;class CreateUserUseCase @Inject constructor(&#10;    private val userRepository: UserRepository&#10;) {&#10;    suspend operator fun invoke(user: User): Result&lt;Unit&gt; = userRepository.createUser(user)&#10;}&#10;&#10;class GetAllUsersUseCase @Inject constructor(&#10;    private val userRepository: UserRepository&#10;) {&#10;    operator fun invoke(): Flow&lt;List&lt;User&gt;&gt; = userRepository.getAllUsers()&#10;}&#10;&#10;class SetCurrentUserUseCase @Inject constructor(&#10;    private val userRepository: UserRepository&#10;) {&#10;    suspend operator fun invoke(userId: String): Result&lt;Unit&gt; = userRepository.setCurrentUser(userId)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_reading_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_reading_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#F3E5F5&quot;&#10;        android:centerColor=&quot;#E1BEE7&quot;&#10;        android:endColor=&quot;#CE93D8&quot;&#10;        android:angle=&quot;315&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_volume_up.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_volume_up.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;#FFFFFF&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M3,9v6h4l5,5V4L7,9H3zM16.5,12c0,-1.77 -1.02,-3.29 -2.5,-4.03v8.05C15.48,15.29 16.5,13.77 16.5,12zM14,3.23v2.06c2.89,0.86 5,3.54 5,6.71s-2.11,5.85 -5,6.71v2.06c4.01,-0.91 7,-4.49 7,-8.77S18.01,4.14 14,3.23z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/speaker_button_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/speaker_button_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;#4CAF50&quot; /&gt;&#10;    &lt;stroke &#10;        android:width=&quot;2dp&quot; &#10;        android:color=&quot;#388E3C&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_letter_recognition_fixed.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_letter_recognition_fixed.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@drawable/gradient_exercise_background&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    tools:context=&quot;.LetterRecognitionActivity&quot;&gt;&#10;&#10;    &lt;!-- Верхняя панель с кнопкой назад, заголовком и прогресс-баром --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;        &lt;!-- Кнопка назад --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/backButton&quot;&#10;            android:layout_width=&quot;32dp&quot;&#10;            android:layout_height=&quot;32dp&quot;&#10;            android:src=&quot;@drawable/ic_arrow_back&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:padding=&quot;4dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&#10;            android:contentDescription=&quot;Назад&quot; /&gt;&#10;&#10;        &lt;!-- Заголовок --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot; Найди букву&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#8E24AA&quot;&#10;            android:layout_marginStart=&quot;12dp&quot;&#10;            android:gravity=&quot;start&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Прогресс-бар --&gt;&#10;    &lt;ProgressBar&#10;        android:id=&quot;@+id/progressBar&quot;&#10;        style=&quot;?android:attr/progressBarStyleHorizontal&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;30dp&quot;&#10;        android:max=&quot;100&quot;&#10;        android:progress=&quot;3&quot;&#10;        android:progressTint=&quot;#9C27B0&quot;&#10;        android:progressBackgroundTint=&quot;#E0E0E0&quot; /&gt;&#10;&#10;    &lt;!-- Красивая кнопка озвучивания --&gt;&#10;    &lt;androidx.cardview.widget.CardView&#10;        android:layout_width=&quot;80dp&quot;&#10;        android:layout_height=&quot;80dp&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;40dp&quot;&#10;        app:cardCornerRadius=&quot;40dp&quot;&#10;        app:cardElevation=&quot;12dp&quot;&#10;        app:cardBackgroundColor=&quot;#8E24AA&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/speakerButton&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:src=&quot;@drawable/ic_volume_up&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&#10;            android:contentDescription=&quot;Озвучить вопрос&quot;&#10;            android:tint=&quot;#FFFFFF&quot;&#10;            android:scaleType=&quot;centerInside&quot; /&gt;&#10;&#10;    &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;    &lt;!-- Сетка карточек с буквами (2x2) --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:gravity=&quot;center&quot;&gt;&#10;&#10;        &lt;!-- Первый ряд --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;            &lt;!-- Карточка 1 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card1&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/letter1&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:text=&quot;А&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#8E24AA&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Карточка 2 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card2&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/letter2&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:text=&quot;Б&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#8E24AA&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Второй ряд --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;!-- Карточка 3 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card3&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/letter3&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:text=&quot;В&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#8E24AA&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Карточка 4 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card4&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/letter4&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:text=&quot;Г&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#8E24AA&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_number_recognition.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_number_recognition.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;#F0F8FF&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    tools:context=&quot;.NumberRecognitionActivity&quot;&gt;&#10;&#10;    &lt;!-- Верхняя панель с кнопкой назад, заголовком и прогресс-баром --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;        &lt;!-- Кнопка назад --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/backButton&quot;&#10;            android:layout_width=&quot;32dp&quot;&#10;            android:layout_height=&quot;32dp&quot;&#10;            android:src=&quot;@drawable/ic_arrow_back&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:padding=&quot;4dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&#10;            android:contentDescription=&quot;Назад&quot; /&gt;&#10;&#10;        &lt;!-- Заголовок --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot; Найди цифру&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#1565C0&quot;&#10;            android:layout_marginStart=&quot;12dp&quot;&#10;            android:gravity=&quot;start&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Прогресс-бар --&gt;&#10;    &lt;ProgressBar&#10;        android:id=&quot;@+id/progressBar&quot;&#10;        style=&quot;?android:attr/progressBarStyleHorizontal&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;30dp&quot;&#10;        android:max=&quot;100&quot;&#10;        android:progress=&quot;5&quot;&#10;        android:progressTint=&quot;#4CAF50&quot;&#10;        android:progressBackgroundTint=&quot;#E0E0E0&quot; /&gt;&#10;&#10;    &lt;!-- Вопрос --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/questionText&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;28sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;#D32F2F&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:background=&quot;#FFEBEE&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:elevation=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;!-- Кнопка динамика для озвучивания --&gt;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/speakerButton&quot;&#10;        android:layout_width=&quot;56dp&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot;&#10;        android:background=&quot;@drawable/speaker_button_background&quot;&#10;        android:src=&quot;@drawable/ic_volume_up&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;        android:contentDescription=&quot;Повторить вопрос&quot;&#10;        android:elevation=&quot;6dp&quot; /&gt;&#10;&#10;    &lt;!-- Сетка карточек с цифрами (2x2) --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:gravity=&quot;center&quot;&gt;&#10;&#10;        &lt;!-- Первый ряд --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;            &lt;!-- Карточка 1 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card1&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/number1&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#1565C0&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Карточка 2 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card2&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/number2&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#1565C0&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Второй ряд --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;!-- Карточка 3 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card3&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/number3&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#1565C0&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Карточка 4 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card4&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/number4&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#1565C0&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;#F0F8FF&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    tools:context=&quot;.NumberRecognitionActivity&quot;&gt;&#10;&#10;    &lt;!-- Верхняя панель с кнопкой назад, заголовком и прогресс-баром --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;        &lt;!-- Кнопка назад --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/backButton&quot;&#10;            android:layout_width=&quot;32dp&quot;&#10;            android:layout_height=&quot;32dp&quot;&#10;            android:src=&quot;@drawable/ic_arrow_back&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:padding=&quot;4dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&#10;            android:contentDescription=&quot;Назад&quot; /&gt;&#10;&#10;        &lt;!-- Заголовок --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot; Найди цифру&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#1565C0&quot;&#10;            android:layout_marginStart=&quot;12dp&quot;&#10;            android:gravity=&quot;start&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Прогресс-бар --&gt;&#10;    &lt;ProgressBar&#10;        android:id=&quot;@+id/progressBar&quot;&#10;        style=&quot;?android:attr/progressBarStyleHorizontal&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;30dp&quot;&#10;        android:max=&quot;100&quot;&#10;        android:progress=&quot;5&quot;&#10;        android:progressTint=&quot;#4CAF50&quot;&#10;        android:progressBackgroundTint=&quot;#E0E0E0&quot; /&gt;&#10;&#10;    &lt;!-- Loading индикатор --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/loadingContainer&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:visibility=&quot;visible&quot;&gt;&#10;&#10;        &lt;ProgressBar&#10;            android:layout_width=&quot;64dp&quot;&#10;            android:layout_height=&quot;64dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            style=&quot;?android:attr/progressBarStyle&quot;&#10;            android:indeterminateTint=&quot;#4CAF50&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Подготовка задания...&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textColor=&quot;#666666&quot;&#10;            android:gravity=&quot;center&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Контейнер с вопросом и карточками --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/gameContainer&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;!-- Вопрос --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/questionText&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textSize=&quot;28sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#D32F2F&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:background=&quot;#FFEBEE&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:elevation=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;!-- Кнопка динамика для озвучивания --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/speakerButton&quot;&#10;            android:layout_width=&quot;56dp&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:background=&quot;@drawable/speaker_button_background&quot;&#10;            android:src=&quot;@drawable/ic_volume_up&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&#10;            android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;            android:contentDescription=&quot;Повторить вопрос&quot;&#10;            android:elevation=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;!-- Сетка карточек с цифрами (2x2) --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;!-- Первый ряд --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;                &lt;!-- Карточка 1 --&gt;&#10;                &lt;androidx.cardview.widget.CardView&#10;                    android:id=&quot;@+id/card1&quot;&#10;                    android:layout_width=&quot;120dp&quot;&#10;                    android:layout_height=&quot;120dp&quot;&#10;                    android:layout_margin=&quot;12dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                    app:cardCornerRadius=&quot;20dp&quot;&#10;                    app:cardElevation=&quot;8dp&quot;&#10;                    app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/number1&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:textSize=&quot;48sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#1565C0&quot;&#10;                        android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;                &lt;!-- Карточка 2 --&gt;&#10;                &lt;androidx.cardview.widget.CardView&#10;                    android:id=&quot;@+id/card2&quot;&#10;                    android:layout_width=&quot;120dp&quot;&#10;                    android:layout_height=&quot;120dp&quot;&#10;                    android:layout_margin=&quot;12dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                    app:cardCornerRadius=&quot;20dp&quot;&#10;                    app:cardElevation=&quot;8dp&quot;&#10;                    app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/number2&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:textSize=&quot;48sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#1565C0&quot;&#10;                        android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Второй ряд --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;!-- Карточка 3 --&gt;&#10;                &lt;androidx.cardview.widget.CardView&#10;                    android:id=&quot;@+id/card3&quot;&#10;                    android:layout_width=&quot;120dp&quot;&#10;                    android:layout_height=&quot;120dp&quot;&#10;                    android:layout_margin=&quot;12dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                    app:cardCornerRadius=&quot;20dp&quot;&#10;                    app:cardElevation=&quot;8dp&quot;&#10;                    app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/number3&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:textSize=&quot;48sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#1565C0&quot;&#10;                        android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;                &lt;!-- Карточка 4 --&gt;&#10;                &lt;androidx.cardview.widget.CardView&#10;                    android:id=&quot;@+id/card4&quot;&#10;                    android:layout_width=&quot;120dp&quot;&#10;                    android:layout_height=&quot;120dp&quot;&#10;                    android:layout_margin=&quot;12dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                    app:cardCornerRadius=&quot;20dp&quot;&#10;                    app:cardElevation=&quot;8dp&quot;&#10;                    app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/number4&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:textSize=&quot;48sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#1565C0&quot;&#10;                        android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_results.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_results.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@drawable/gradient_celebration_background&quot;&#10;    tools:context=&quot;.ResultsActivity&quot;&gt;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:fillViewport=&quot;true&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:padding=&quot;24dp&quot;&gt;&#10;&#10;            &lt;!-- Заголовок поздравления --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/congratulationText&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Превосходно! &quot;&#10;                android:textSize=&quot;32sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#FF6F00&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:layout_marginTop=&quot;40dp&quot;&#10;                android:layout_marginBottom=&quot;30dp&quot;&#10;                android:shadowColor=&quot;#000000&quot;&#10;                android:shadowDx=&quot;2&quot;&#10;                android:shadowDy=&quot;2&quot;&#10;                android:shadowRadius=&quot;4&quot; /&gt;&#10;&#10;            &lt;!-- Звездочки оценка --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginBottom=&quot;40dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/star1&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_margin=&quot;4dp&quot;&#10;                    android:src=&quot;@android:drawable/btn_star_big_on&quot; /&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/star2&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_margin=&quot;4dp&quot;&#10;                    android:src=&quot;@android:drawable/btn_star_big_on&quot; /&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/star3&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_margin=&quot;4dp&quot;&#10;                    android:src=&quot;@android:drawable/btn_star_big_on&quot; /&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/star4&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_margin=&quot;4dp&quot;&#10;                    android:src=&quot;@android:drawable/btn_star_big_on&quot; /&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/star5&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_margin=&quot;4dp&quot;&#10;                    android:src=&quot;@android:drawable/btn_star_big_on&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Статистика --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;40dp&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;12dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;24dp&quot;&#10;                    android:gravity=&quot;center&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Твой результат&quot;&#10;                        android:textSize=&quot;20sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#1565C0&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/scoreText&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Правильных ответов: 18 из 20&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textColor=&quot;#2E7D32&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/percentageText&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;90%&quot;&#10;                        android:textSize=&quot;36sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#FF6F00&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Кнопки --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:weightSum=&quot;2&quot;&gt;&#10;&#10;                &lt;!-- Кнопка Повторить --&gt;&#10;                &lt;androidx.cardview.widget.CardView&#10;                    android:id=&quot;@+id/retryButton&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;60dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:layout_margin=&quot;8dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                    app:cardCornerRadius=&quot;16dp&quot;&#10;                    app:cardElevation=&quot;8dp&quot;&#10;                    app:cardBackgroundColor=&quot;#4CAF50&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:text=&quot; Повторить&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#FFFFFF&quot;&#10;                        android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;                &lt;!-- Кнопка Все тренировки --&gt;&#10;                &lt;androidx.cardview.widget.CardView&#10;                    android:id=&quot;@+id/backToMenuButton&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;60dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:layout_margin=&quot;8dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                    app:cardCornerRadius=&quot;16dp&quot;&#10;                    app:cardElevation=&quot;8dp&quot;&#10;                    app:cardBackgroundColor=&quot;#2196F3&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:text=&quot; Все тренировки&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#FFFFFF&quot;&#10;                        android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/ScrollView&gt;&#10;&#10;&lt;/FrameLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@drawable/gradient_celebration_background&quot;&#10;    tools:context=&quot;.ResultsActivity&quot;&gt;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:fillViewport=&quot;true&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:padding=&quot;24dp&quot;&gt;&#10;&#10;            &lt;!-- Заголовок поздравления --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/congratulationText&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Превосходно! &quot;&#10;                android:textSize=&quot;32sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#FF6F00&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:layout_marginTop=&quot;40dp&quot;&#10;                android:layout_marginBottom=&quot;30dp&quot;&#10;                android:shadowColor=&quot;#000000&quot;&#10;                android:shadowDx=&quot;2&quot;&#10;                android:shadowDy=&quot;2&quot;&#10;                android:shadowRadius=&quot;4&quot; /&gt;&#10;&#10;            &lt;!-- Звездочки оценка --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginBottom=&quot;40dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/star1&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_margin=&quot;4dp&quot;&#10;                    android:src=&quot;@android:drawable/btn_star_big_on&quot; /&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/star2&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_margin=&quot;4dp&quot;&#10;                    android:src=&quot;@android:drawable/btn_star_big_on&quot; /&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/star3&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_margin=&quot;4dp&quot;&#10;                    android:src=&quot;@android:drawable/btn_star_big_on&quot; /&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/star4&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_margin=&quot;4dp&quot;&#10;                    android:src=&quot;@android:drawable/btn_star_big_on&quot; /&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/star5&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_margin=&quot;4dp&quot;&#10;                    android:src=&quot;@android:drawable/btn_star_big_on&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Статистика --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;40dp&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;12dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;24dp&quot;&#10;                    android:gravity=&quot;center&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Твой результат&quot;&#10;                        android:textSize=&quot;20sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#1565C0&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/scoreText&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Правильных ответов: 18 из 20&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textColor=&quot;#2E7D32&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&#10;                        android:layout_gravity=&quot;center_horizontal&quot;&#10;                        android:gravity=&quot;center&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/percentageText&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;90%&quot;&#10;                        android:textSize=&quot;36sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#FF6F00&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Кнопки --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:weightSum=&quot;2&quot;&gt;&#10;&#10;                &lt;!-- Кнопка Повторить --&gt;&#10;                &lt;androidx.cardview.widget.CardView&#10;                    android:id=&quot;@+id/retryButton&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;60dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:layout_margin=&quot;8dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                    app:cardCornerRadius=&quot;16dp&quot;&#10;                    app:cardElevation=&quot;8dp&quot;&#10;                    app:cardBackgroundColor=&quot;#4CAF50&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:text=&quot; Повторить&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#FFFFFF&quot;&#10;                        android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;                &lt;!-- Кнопка Все тренировки --&gt;&#10;                &lt;androidx.cardview.widget.CardView&#10;                    android:id=&quot;@+id/backToMenuButton&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;60dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:layout_margin=&quot;8dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                    app:cardCornerRadius=&quot;16dp&quot;&#10;                    app:cardElevation=&quot;8dp&quot;&#10;                    app:cardBackgroundColor=&quot;#2196F3&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:text=&quot; Все тренировки&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#FFFFFF&quot;&#10;                        android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/ScrollView&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>